package com.redhat.ceylon.compiler.java.test.annotations;

@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.java.lang.annotation.Target({})
@interface AnnotationClassString$annotation$ {
    
    public abstract .java.lang.String s();
}
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.java.lang.annotation.Target({.java.lang.annotation.ElementType.TYPE})
@interface AnnotationClassString$annotations$ {
    
    public abstract .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString$annotation$[] value();
}
@.ceylon.language.AnnotationAnnotation$annotation$
@.ceylon.language.FinalAnnotation$annotation$
final class AnnotationClassString implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.SequencedAnnotation<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration> {
    
    AnnotationClassString(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString$annotation$ anno) {
        this(anno.s());
    }
    
    AnnotationClassString(final .java.lang.String s) {
        this.$ceylon$language$ConstrainedAnnotation$this$ = new .ceylon.language.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString, .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString>, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration>(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString.$TypeDescriptor$), .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration.$TypeDescriptor$, this);
    }
    protected final .ceylon.language.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString, .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString>, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration> $ceylon$language$ConstrainedAnnotation$this$;
    
    @.java.lang.Override
    public .ceylon.language.ConstrainedAnnotation$impl<? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString, ? extends .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString>, ? super .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration> $ceylon$language$ConstrainedAnnotation$impl() {
        return $ceylon$language$ConstrainedAnnotation$this$;
    }
    
    @.java.lang.Override
    public final boolean occurs(final .ceylon.language.Annotated programElement) {
        return $ceylon$language$ConstrainedAnnotation$this$.occurs(programElement);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString.class);
}
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.java.lang.annotation.Target({})
@interface AnnotationClassStringDefaulted$annotation$ {
    
    public abstract .java.lang.String s() default "foo";
}
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.java.lang.annotation.Target({.java.lang.annotation.ElementType.TYPE})
@interface AnnotationClassStringDefaulted$annotations$ {
    
    public abstract .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted$annotation$[] value();
}
@.ceylon.language.AnnotationAnnotation$annotation$
@.ceylon.language.FinalAnnotation$annotation$
final class AnnotationClassStringDefaulted implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.SequencedAnnotation<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration> {
    
    AnnotationClassStringDefaulted() {
        (
            let
            {
                .java.lang.String $ceylontmp$s$0 = .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted.$default$s();
                this($ceylontmp$s$0);
            }
            returning null;
        );
    }
    
    AnnotationClassStringDefaulted(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted$annotation$ anno) {
        this(anno.s());
    }
    
    AnnotationClassStringDefaulted(final .java.lang.String s) {
        this.$ceylon$language$ConstrainedAnnotation$this$ = new .ceylon.language.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted, .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted>, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration>(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted.$TypeDescriptor$), .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration.$TypeDescriptor$, this);
    }
    
    public static .java.lang.String $default$s() {
        return "foo";
    }
    protected final .ceylon.language.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted, .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted>, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration> $ceylon$language$ConstrainedAnnotation$this$;
    
    @.java.lang.Override
    public .ceylon.language.ConstrainedAnnotation$impl<? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted, ? extends .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted>, ? super .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration> $ceylon$language$ConstrainedAnnotation$impl() {
        return $ceylon$language$ConstrainedAnnotation$this$;
    }
    
    @.java.lang.Override
    public final boolean occurs(final .ceylon.language.Annotated programElement) {
        return $ceylon$language$ConstrainedAnnotation$this$.occurs(programElement);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted.class);
}
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.java.lang.annotation.Target({.java.lang.annotation.ElementType.TYPE})
@interface AnnotationClassStringSequence$annotation$ {
    
    public abstract .java.lang.String[] s();
}
@.ceylon.language.AnnotationAnnotation$annotation$
@.ceylon.language.FinalAnnotation$annotation$
final class AnnotationClassStringSequence implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.OptionalAnnotation<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequence, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration> {
    
    AnnotationClassStringSequence(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequence$annotation$ anno) {
        this(.com.redhat.ceylon.compiler.java.Util.sequentialWrapperBoxed(anno.s()));
    }
    
    AnnotationClassStringSequence(final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        this.$ceylon$language$ConstrainedAnnotation$this$ = new .ceylon.language.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequence, .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequence, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration>(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequence.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequence.$TypeDescriptor$), .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration.$TypeDescriptor$, this);
    }
    protected final .ceylon.language.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequence, .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequence, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration> $ceylon$language$ConstrainedAnnotation$this$;
    
    @.java.lang.Override
    public .ceylon.language.ConstrainedAnnotation$impl<? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequence, ? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequence, ? super .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration> $ceylon$language$ConstrainedAnnotation$impl() {
        return $ceylon$language$ConstrainedAnnotation$this$;
    }
    
    @.java.lang.Override
    public final boolean occurs(final .ceylon.language.Annotated programElement) {
        return $ceylon$language$ConstrainedAnnotation$this$.occurs(programElement);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequence.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequence.class);
}
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.java.lang.annotation.Target({.java.lang.annotation.ElementType.TYPE})
@interface AnnotationClassStringSequenceDefaulted$annotation$ {
    
    public abstract .java.lang.String[] s() default {"foo"};
}
@.ceylon.language.AnnotationAnnotation$annotation$
@.ceylon.language.FinalAnnotation$annotation$
final class AnnotationClassStringSequenceDefaulted implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.OptionalAnnotation<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequenceDefaulted, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration> {
    
    AnnotationClassStringSequenceDefaulted() {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$s$1 = .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequenceDefaulted.$default$s();
                this($ceylontmp$s$1);
            }
            returning null;
        );
    }
    
    AnnotationClassStringSequenceDefaulted(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequenceDefaulted$annotation$ anno) {
        this(.com.redhat.ceylon.compiler.java.Util.sequentialWrapperBoxed(anno.s()));
    }
    
    AnnotationClassStringSequenceDefaulted(final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        this.$ceylon$language$ConstrainedAnnotation$this$ = new .ceylon.language.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequenceDefaulted, .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequenceDefaulted, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration>(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequenceDefaulted.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequenceDefaulted.$TypeDescriptor$), .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration.$TypeDescriptor$, this);
    }
    
    public static .ceylon.language.Sequential<? extends .ceylon.language.String> $default$s() {
        return (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("foo")});
    }
    protected final .ceylon.language.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequenceDefaulted, .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequenceDefaulted, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration> $ceylon$language$ConstrainedAnnotation$this$;
    
    @.java.lang.Override
    public .ceylon.language.ConstrainedAnnotation$impl<? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequenceDefaulted, ? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequenceDefaulted, ? super .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration> $ceylon$language$ConstrainedAnnotation$impl() {
        return $ceylon$language$ConstrainedAnnotation$this$;
    }
    
    @.java.lang.Override
    public final boolean occurs(final .ceylon.language.Annotated programElement) {
        return $ceylon$language$ConstrainedAnnotation$this$.occurs(programElement);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequenceDefaulted.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequenceDefaulted.class);
}
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.java.lang.annotation.Target({.java.lang.annotation.ElementType.TYPE})
@interface AnnotationClassStringIterable$annotation$ {
    
    public abstract .java.lang.String[] s();
}
@.ceylon.language.AnnotationAnnotation$annotation$
@.ceylon.language.FinalAnnotation$annotation$
final class AnnotationClassStringIterable implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.OptionalAnnotation<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterable, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration> {
    
    AnnotationClassStringIterable(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterable$annotation$ anno) {
        this(.com.redhat.ceylon.compiler.java.Util.sequentialWrapperBoxed(anno.s()));
    }
    
    AnnotationClassStringIterable(final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> s) {
        this.$ceylon$language$ConstrainedAnnotation$this$ = new .ceylon.language.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterable, .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterable, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration>(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterable.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterable.$TypeDescriptor$), .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration.$TypeDescriptor$, this);
    }
    protected final .ceylon.language.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterable, .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterable, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration> $ceylon$language$ConstrainedAnnotation$this$;
    
    @.java.lang.Override
    public .ceylon.language.ConstrainedAnnotation$impl<? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterable, ? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterable, ? super .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration> $ceylon$language$ConstrainedAnnotation$impl() {
        return $ceylon$language$ConstrainedAnnotation$this$;
    }
    
    @.java.lang.Override
    public final boolean occurs(final .ceylon.language.Annotated programElement) {
        return $ceylon$language$ConstrainedAnnotation$this$.occurs(programElement);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterable.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterable.class);
}
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.java.lang.annotation.Target({.java.lang.annotation.ElementType.TYPE})
@interface AnnotationClassStringIterableDefaulted$annotation$ {
    
    public abstract .java.lang.String[] s() default {"foo"};
}
@.ceylon.language.AnnotationAnnotation$annotation$
@.ceylon.language.FinalAnnotation$annotation$
final class AnnotationClassStringIterableDefaulted implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.OptionalAnnotation<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterableDefaulted, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration> {
    
    AnnotationClassStringIterableDefaulted() {
        (
            let
            {
                .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> $ceylontmp$s$2 = .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterableDefaulted.$default$s();
                this($ceylontmp$s$2);
            }
            returning null;
        );
    }
    
    AnnotationClassStringIterableDefaulted(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterableDefaulted$annotation$ anno) {
        this(.com.redhat.ceylon.compiler.java.Util.sequentialWrapperBoxed(anno.s()));
    }
    
    AnnotationClassStringIterableDefaulted(final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> s) {
        this.$ceylon$language$ConstrainedAnnotation$this$ = new .ceylon.language.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterableDefaulted, .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterableDefaulted, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration>(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterableDefaulted.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterableDefaulted.$TypeDescriptor$), .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration.$TypeDescriptor$, this);
    }
    
    public static .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> $default$s() {
        return new .com.redhat.ceylon.compiler.java.language.LazyIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 1, false){
            
            @.java.lang.Override
            protected final .java.lang.Object $evaluate$(int $index$) {
                switch ($index$) {
                case 0: 
                    return .ceylon.language.String.instance("foo");
                
                default: 
                    return null;
                
                }
            }
        };
    }
    protected final .ceylon.language.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterableDefaulted, .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterableDefaulted, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration> $ceylon$language$ConstrainedAnnotation$this$;
    
    @.java.lang.Override
    public .ceylon.language.ConstrainedAnnotation$impl<? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterableDefaulted, ? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterableDefaulted, ? super .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration> $ceylon$language$ConstrainedAnnotation$impl() {
        return $ceylon$language$ConstrainedAnnotation$this$;
    }
    
    @.java.lang.Override
    public final boolean occurs(final .ceylon.language.Annotated programElement) {
        return $ceylon$language$ConstrainedAnnotation$this$.occurs(programElement);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterableDefaulted.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterableDefaulted.class);
}
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.java.lang.annotation.Target({.java.lang.annotation.ElementType.TYPE})
@interface AnnotationClassStringVariadic$annotation$ {
    
    public abstract .java.lang.String[] s();
}
@.ceylon.language.AnnotationAnnotation$annotation$
@.ceylon.language.FinalAnnotation$annotation$
final class AnnotationClassStringVariadic implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.OptionalAnnotation<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringVariadic, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration> {
    
    AnnotationClassStringVariadic(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringVariadic$annotation$ anno) {
        this(.com.redhat.ceylon.compiler.java.Util.sequentialWrapperBoxed(anno.s()));
    }
    
    AnnotationClassStringVariadic(final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> s) {
        this.$ceylon$language$ConstrainedAnnotation$this$ = new .ceylon.language.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringVariadic, .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringVariadic, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration>(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringVariadic.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringVariadic.$TypeDescriptor$), .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration.$TypeDescriptor$, this);
    }
    protected final .ceylon.language.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringVariadic, .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringVariadic, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration> $ceylon$language$ConstrainedAnnotation$this$;
    
    @.java.lang.Override
    public .ceylon.language.ConstrainedAnnotation$impl<? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringVariadic, ? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringVariadic, ? super .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration> $ceylon$language$ConstrainedAnnotation$impl() {
        return $ceylon$language$ConstrainedAnnotation$this$;
    }
    
    @.java.lang.Override
    public final boolean occurs(final .ceylon.language.Annotated programElement) {
        return $ceylon$language$ConstrainedAnnotation$this$.occurs(programElement);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringVariadic.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringVariadic.class);
}
@.com.redhat.ceylon.compiler.java.metadata.AnnotationInstantiation(
        arguments = {0},
        primary = .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString.class)
final class annotationClassString_ {
    
    private annotationClassString_() {
    }
    
    static .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString annotationClassString() {
        return (
            let
            {
                .java.lang.String $ceylontmp$s$3 = .com.redhat.ceylon.compiler.java.test.annotations.annotationClassString_.annotationClassString$s();
            }
            returning annotationClassString($ceylontmp$s$3);
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.StringValue("s")
    public static final .java.lang.String annotationClassString$s() {
        return "s";
    }
    
    @.ceylon.language.AnnotationAnnotation$annotation$
    static .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString annotationClassString(final .java.lang.String s) {
        return new .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString(s);
    }
}
@.com.redhat.ceylon.compiler.java.metadata.AnnotationInstantiation(
        arguments = {-32768},
        primary = .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString.class)
@.com.redhat.ceylon.compiler.java.metadata.StringExprs({@.com.redhat.ceylon.compiler.java.metadata.StringValue(
        name = "$arg$s",
        value = "bar")})
final class annotationClassStringStatic_ {
    
    private annotationClassStringStatic_() {
    }
    
    @.ceylon.language.AnnotationAnnotation$annotation$
    static .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString annotationClassStringStatic() {
        return new .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString("bar");
    }
}
@.com.redhat.ceylon.compiler.java.metadata.AnnotationInstantiation(
        arguments = {0},
        primary = .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString.class)
final class annotationClassStringDropped_ {
    
    private annotationClassStringDropped_() {
    }
    
    @.ceylon.language.AnnotationAnnotation$annotation$
    static .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString annotationClassStringDropped(final .java.lang.String s, final .java.lang.String t) {
        return new .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString(s);
    }
}
@.com.redhat.ceylon.compiler.java.metadata.AnnotationInstantiation(
        arguments = {1},
        primary = .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString.class)
final class annotationClassStringDropped2_ {
    
    private annotationClassStringDropped2_() {
    }
    
    @.ceylon.language.AnnotationAnnotation$annotation$
    static .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString annotationClassStringDropped2(final .java.lang.String t, final .java.lang.String s) {
        return new .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString(s);
    }
}
@.com.redhat.ceylon.compiler.java.metadata.AnnotationInstantiation(
        arguments = {},
        primary = .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted.class)
final class annotationClassStringDefaulted_ {
    
    private annotationClassStringDefaulted_() {
    }
    
    @.ceylon.language.AnnotationAnnotation$annotation$
    static .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted annotationClassStringDefaulted() {
        return new .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted();
    }
}
@.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString$annotations$({
        @.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString$annotation$(s = "baz"),
        @.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString$annotation$(s = "bar"),
        @.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString$annotation$(s = "yes"),
        @.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString$annotation$(s = "yes")})
@.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted$annotations$({@.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted$annotation$})
class AnnotationClassString_callsite implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    AnnotationClassString_callsite() {
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString_callsite.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString_callsite.class);
}