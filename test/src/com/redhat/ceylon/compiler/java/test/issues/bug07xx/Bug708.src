package com.redhat.ceylon.compiler.java.test.issues.bug07xx;

@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 5)
@.com.redhat.ceylon.compiler.java.metadata.Method
final class bug708_ {
    
    private bug708_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo(
            value = "T|ceylon.language::Null|ceylon.language::String",
            erased = true)
    @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
            value = "T",
            variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
            satisfies = {},
            caseTypes = {})})
    static <T>.java.lang.Object bug708(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT) {
        return null;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.issues.bug07xx.bug708_.bug708(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
}
class Bug708<T> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    Bug708(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT) {
        this.$reifiedT = $reifiedT;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT;
    
    public final .java.lang.Object test() {
        return null;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708.class, $reifiedT);
    }
}
final class bug708_test_ {
    
    private bug708_test_() {
    }
    
    static void bug708_test() {
        .ceylon.language.String $s$1;
        if (($s$1 = (.ceylon.language.String).com.redhat.ceylon.compiler.java.test.issues.bug07xx.bug708_.<.ceylon.language.String>bug708(.ceylon.language.String.$TypeDescriptor)) != null) {
            final .java.lang.String $s$2 = $s$1.toString();
        }
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.issues.bug07xx.bug708_test_.bug708_test();
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 5)
@.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
        value = "T",
        variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
        satisfies = {},
        caseTypes = {})})
class Bug708_Class<T> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    Bug708_Class(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT, @.com.redhat.ceylon.compiler.java.metadata.Name("param")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo(
            value = "T|ceylon.language::Null|ceylon.language::String",
            erased = true)
    final .java.lang.Object param, @.com.redhat.ceylon.compiler.java.metadata.Name("param2")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo(
            value = "T|ceylon.language::Null|ceylon.language::String",
            erased = true)
    final .java.lang.Object param2) {
        this.$reifiedT = $reifiedT;
        this.param = param;
        this.param2 = param2;
        this.attr = getParam$priv();
        .ceylon.language.String $s$4;
        if (($s$4 = (.ceylon.language.String)new .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708_Class<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor, .ceylon.language.String.instance(""), .ceylon.language.String.instance("")).getParam$priv()) != null) {
            final .java.lang.String $s$5 = $s$4.toString();
        }
        .ceylon.language.String $s$7;
        if (($s$7 = (.ceylon.language.String)new .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708_Class<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor, .ceylon.language.String.instance(""), .ceylon.language.String.instance("")).getParam2()) != null) {
            final .java.lang.String $s$8 = $s$7.toString();
        }
        .ceylon.language.String $s$10;
        if (($s$10 = (.ceylon.language.String)new .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708_Class<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor, .ceylon.language.String.instance(""), .ceylon.language.String.instance("")).getAttr()) != null) {
            final .java.lang.String $s$11 = $s$10.toString();
        }
        .ceylon.language.String $s$13;
        if (($s$13 = (.ceylon.language.String)new .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708_Class<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor, .ceylon.language.String.instance(""), .ceylon.language.String.instance("")).getGetter()) != null) {
            final .java.lang.String $s$14 = $s$13.toString();
        }
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT;
    private final .java.lang.Object param;
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo(
            value = "T|ceylon.language::Null|ceylon.language::String",
            erased = true)
    private final .java.lang.Object getParam$priv() {
        return param;
    }
    private final .java.lang.Object attr;
    
    @.ceylon.language.Shared$annotation
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo(
            value = "T|ceylon.language::Null|ceylon.language::String",
            erased = true)
    public final .java.lang.Object getAttr() {
        return attr;
    }
    private final .java.lang.Object param2;
    
    @.ceylon.language.Shared$annotation
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo(
            value = "T|ceylon.language::Null|ceylon.language::String",
            erased = true)
    public final .java.lang.Object getParam2() {
        return param2;
    }
    
    @.ceylon.language.Shared$annotation
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo(
            value = "T|ceylon.language::Null|ceylon.language::String",
            erased = true)
    public final .java.lang.Object getGetter() {
        return getParam$priv();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708_Class.class, $reifiedT);
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 5)
@.ceylon.language.Shared$annotation
@.com.redhat.ceylon.compiler.java.metadata.Class(extendsType = "ceylon.language::Object")
@.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
@.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"ceylon.language::Map<ceylon.language::Integer,ceylon.language::String|T>"})
@.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
        value = "T",
        variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
        satisfies = {"ceylon.language::Object"},
        caseTypes = {})})
public class Bug708Map<T> extends .java.lang.Object implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.Map<.ceylon.language.Integer, .java.lang.Object> {
    
    public Bug708Map(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT) {
        super();
        this.$reifiedT = $reifiedT;
        this.$ceylon$language$Map$this = new .ceylon.language.Map$impl<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor, $reifiedT), this);
        this.$ceylon$language$Collection$this = new .ceylon.language.Collection$impl<.ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor, $reifiedT)), this);
        this.$ceylon$language$Iterable$this = new .ceylon.language.Iterable$impl<.ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor, $reifiedT)), .ceylon.language.Null.$TypeDescriptor, this);
        this.$ceylon$language$Container$this = new .ceylon.language.Container$impl<.ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor, $reifiedT)), .ceylon.language.Null.$TypeDescriptor, this);
        this.$ceylon$language$Category$this = new .ceylon.language.Category$impl(this);
        this.$ceylon$language$Cloneable$this = new .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Collection.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor, $reifiedT))), (.ceylon.language.Cloneable<.ceylon.language.Collection<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>>>)(.ceylon.language.Cloneable)this);
        this.$ceylon$language$Correspondence$this = new .ceylon.language.Correspondence$impl<.java.lang.Object, .java.lang.Object>(.ceylon.language.Object.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor, $reifiedT), this);
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT;
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    protected final .ceylon.language.Map$impl<.ceylon.language.Integer, .java.lang.Object> $ceylon$language$Map$this;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Map$impl<.ceylon.language.Integer, .java.lang.Object> $ceylon$language$Map$impl() {
        return $ceylon$language$Map$this;
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public boolean equals(final .java.lang.Object that) {
        return $ceylon$language$Map$this.equals(that);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public int hashCode() {
        return $ceylon$language$Map$this.hashCode();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Map<? extends .java.lang.Object, ? extends .ceylon.language.Set<? extends .ceylon.language.Integer>> getInverse() {
        return $ceylon$language$Map$this.getInverse();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <Result>.ceylon.language.Map<? extends .ceylon.language.Integer, ? extends Result> mapItems(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedResult, final .ceylon.language.Callable<? extends Result> mapping) {
        return $ceylon$language$Map$this.mapItems($reifiedResult, mapping);
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    protected final .ceylon.language.Collection$impl<.ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>> $ceylon$language$Collection$this;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Collection$impl<.ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>> $ceylon$language$Collection$impl() {
        return $ceylon$language$Collection$this;
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .java.lang.String toString() {
        return $ceylon$language$Collection$this.toString();
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    protected final .ceylon.language.Iterable$impl<.ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>, .java.lang.Object> $ceylon$language$Iterable$this;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Iterable$impl<.ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>, .java.lang.Object> $ceylon$language$Iterable$impl() {
        return $ceylon$language$Iterable$this;
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object> getFirst() {
        return (.ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>)(.ceylon.language.Entry)$ceylon$language$Iterable$this.getFirst();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object> getLast() {
        return (.ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>)(.ceylon.language.Entry)$ceylon$language$Iterable$this.getLast();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>, ? extends .java.lang.Object> getRest() {
        return $ceylon$language$Iterable$this.getRest();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Sequential<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>> getSequence() {
        return $ceylon$language$Iterable$this.getSequence();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <Result>.ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object> map(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedResult, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this.map($reifiedResult, collecting);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>, ? extends .java.lang.Object> filter(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.filter(selecting);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <Result>Result fold(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedResult, final Result initial, final .ceylon.language.Callable<? extends Result> accumulating) {
        return $ceylon$language$Iterable$this.fold($reifiedResult, initial, accumulating);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object> find(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.find(selecting);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object> findLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.findLast(selecting);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Sequential<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>> sort(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return $ceylon$language$Iterable$this.sort(comparing);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <Result>.ceylon.language.Sequential<? extends Result> collect(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedResult, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this.collect($reifiedResult, collecting);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Sequential<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>> select(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.select(selecting);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public boolean any(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.any(selecting);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public boolean every(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.every(selecting);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>, ? extends .java.lang.Object> skipping(final long skip) {
        return $ceylon$language$Iterable$this.skipping(skip);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>, ? extends .java.lang.Object> taking(final long take) {
        return $ceylon$language$Iterable$this.taking(take);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>, ? extends .java.lang.Object> by(final long step) {
        return $ceylon$language$Iterable$this.by(step);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public long count(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.count(selecting);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>, ? extends .java.lang.Object> getCoalesced() {
        return $ceylon$language$Iterable$this.getCoalesced();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>>, ? extends .java.lang.Object> getIndexed() {
        return $ceylon$language$Iterable$this.getIndexed();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <Other>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> following(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedOther, final Other head) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this.following($reifiedOther, head);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <Other, OtherAbsent>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends OtherAbsent> chain(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedOther, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedOtherAbsent, final .ceylon.language.Iterable<? extends Other, ? extends OtherAbsent> other) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends OtherAbsent>)$ceylon$language$Iterable$this.chain($reifiedOther, $reifiedOtherAbsent, other);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <Default>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> defaultNullElements(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedDefault, final Default defaultValue) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this.defaultNullElements($reifiedDefault, defaultValue);
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    protected final .ceylon.language.Container$impl<.ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>, .java.lang.Object> $ceylon$language$Container$this;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Container$impl<.ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>, .java.lang.Object> $ceylon$language$Container$impl() {
        return $ceylon$language$Container$this;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    protected final .ceylon.language.Category$impl $ceylon$language$Category$this;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Category$impl $ceylon$language$Category$impl() {
        return $ceylon$language$Category$this;
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public boolean containsEvery(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this.containsEvery(elements);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public boolean containsAny(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this.containsAny(elements);
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    protected final .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>>> $ceylon$language$Cloneable$this;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>>> $ceylon$language$Cloneable$impl() {
        return $ceylon$language$Cloneable$this;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    protected final .ceylon.language.Correspondence$impl<.java.lang.Object, .java.lang.Object> $ceylon$language$Correspondence$this;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Correspondence$impl<.java.lang.Object, .java.lang.Object> $ceylon$language$Correspondence$impl() {
        return $ceylon$language$Correspondence$this;
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public boolean definesEvery(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> keys) {
        return $ceylon$language$Correspondence$this.definesEvery(keys);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public boolean definesAny(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> keys) {
        return $ceylon$language$Correspondence$this.definesAny(keys);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Sequential items(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> keys) {
        return $ceylon$language$Correspondence$this.items(keys);
    }
    
    @.ceylon.language.Shared$annotation
    @.ceylon.language.Actual$annotation
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Boolean")
    public final boolean getEmpty() {
        return true;
    }
    
    @.ceylon.language.Shared$annotation
    @.ceylon.language.Actual$annotation
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    public final long getSize() {
        return 0L;
    }
    
    @.ceylon.language.Shared$annotation
    @.ceylon.language.Actual$annotation
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo(
            value = "ceylon.language::String|ceylon.language::Null|T",
            erased = true)
    public final .java.lang.Object get(@.com.redhat.ceylon.compiler.java.metadata.Name("key")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Object")
    final .java.lang.Object key) {
        return null;
    }
    
    @.ceylon.language.Shared$annotation
    @.ceylon.language.Actual$annotation
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Boolean")
    public final boolean contains(@.com.redhat.ceylon.compiler.java.metadata.Name("element")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Object")
    final .java.lang.Object element) {
        return false;
    }
    
    @.ceylon.language.Shared$annotation
    @.ceylon.language.Actual$annotation
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Boolean")
    public final boolean defines(@.com.redhat.ceylon.compiler.java.metadata.Name("key")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Object")
    final .java.lang.Object key) {
        return false;
    }
    
    @.ceylon.language.Shared$annotation
    @.ceylon.language.Actual$annotation
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("com.redhat.ceylon.compiler.java.test.issues.bug07xx::Bug708Map<T>")
    public final .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708Map<T> getClone() {
        return this;
    }
    
    @.ceylon.language.Shared$annotation
    @.ceylon.language.Actual$annotation
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo(
            value = "ceylon.language::Iterator<ceylon.language::Entry<ceylon.language::Integer,ceylon.language::String|T>>",
            erased = true)
    public final .ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>> iterator() {
        return (.ceylon.language.Iterator).ceylon.language.nothing_.$get();
    }
    
    @.ceylon.language.Shared$annotation
    @.ceylon.language.Actual$annotation
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Set<ceylon.language::Integer>")
    public final .ceylon.language.Set<? extends .ceylon.language.Integer> getKeys() {
        return (.ceylon.language.Set).ceylon.language.nothing_.$get();
    }
    
    @.ceylon.language.Shared$annotation
    @.ceylon.language.Actual$annotation
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo(
            value = "ceylon.language::Collection<ceylon.language::String|T>",
            erased = true)
    public final .ceylon.language.Collection getValues() {
        return (.ceylon.language.Collection).ceylon.language.nothing_.$get();
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708Map(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708Map.class, $reifiedT);
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 5)
@.com.redhat.ceylon.compiler.java.metadata.Method
public final class bug708_test2_ {
    
    private bug708_test2_() {
    }
    
    @.ceylon.language.Shared$annotation
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    public static void bug708_test2(@.com.redhat.ceylon.compiler.java.metadata.Name("key")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    final long key) {
        .ceylon.language.String $entry$16;
        if (($entry$16 = (.ceylon.language.String)(.ceylon.language.String).com.redhat.ceylon.compiler.java.test.issues.bug07xx.bug708_cache_.$get().get(.ceylon.language.Integer.instance(key))) != null) {
            final .java.lang.String $entry$17 = $entry$16.toString();
        }
    }
}
final class bug708extra1_ {
    
    private bug708extra1_() {
    }
    private static final .ceylon.language.String[] value;
    static {
        value = new .ceylon.language.String[]{(.ceylon.language.String).com.redhat.ceylon.compiler.java.test.issues.bug07xx.bug708_.<.ceylon.language.String>bug708(.ceylon.language.String.$TypeDescriptor)};
    }
    
    public static .ceylon.language.String $get() {
        try {
            return value[0];
        } catch (.java.lang.NullPointerException ex) {
            throw new .ceylon.language.InitializationException("Cyclic initialization");
        }
    }
}
final class bug708extra2_ {
    
    private bug708extra2_() {
    }
    private static final .ceylon.language.String[] value;
    static {
        value = new .ceylon.language.String[]{(.ceylon.language.String)new .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor).test()};
    }
    
    public static .ceylon.language.String $get() {
        try {
            return value[0];
        } catch (.java.lang.NullPointerException ex) {
            throw new .ceylon.language.InitializationException("Cyclic initialization");
        }
    }
}
final class bug708obj_ {
    
    private bug708obj_() {
    }
    private static final .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708<.ceylon.language.String>[] value;
    static {
        value = new .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708[]{new .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor)};
    }
    
    public static .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708<.ceylon.language.String> $get() {
        try {
            return value[0];
        } catch (.java.lang.NullPointerException ex) {
            throw new .ceylon.language.InitializationException("Cyclic initialization");
        }
    }
}
final class bug708extra3_ {
    
    private bug708extra3_() {
    }
    private static final .ceylon.language.String[] value;
    static {
        value = new .ceylon.language.String[]{(.ceylon.language.String)(
            let
            {
                .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708<.ceylon.language.String> $safe$18 = .com.redhat.ceylon.compiler.java.test.issues.bug07xx.bug708obj_.$get();
            }
            returning $safe$18 != null ? $safe$18.test() : null;
        )};
    }
    
    public static .ceylon.language.String $get() {
        try {
            return value[0];
        } catch (.java.lang.NullPointerException ex) {
            throw new .ceylon.language.InitializationException("Cyclic initialization");
        }
    }
}
final class bug708seq_ {
    
    private bug708seq_() {
    }
    private static final .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708<.ceylon.language.String>>[] value;
    static {
        value = new .ceylon.language.Sequential[]{new .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708<.ceylon.language.String>, .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708<.ceylon.language.String>, .ceylon.language.Empty>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708.class, .ceylon.language.String.$TypeDescriptor), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708.class, .ceylon.language.String.$TypeDescriptor), .ceylon.language.Empty.$TypeDescriptor, new .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor), .ceylon.language.empty_.$get())};
    }
    
    public static .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708<.ceylon.language.String>> $get() {
        try {
            return value[0];
        } catch (.java.lang.NullPointerException ex) {
            throw new .ceylon.language.InitializationException("Cyclic initialization");
        }
    }
}
final class bug708extra4_ {
    
    private bug708extra4_() {
    }
    private static final .ceylon.language.Sequential<? extends .ceylon.language.String>[] value;
    static {
        value = new .ceylon.language.Sequential[]{(
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708<.ceylon.language.String>, ? extends .java.lang.Object> $spread$19$iterable = .com.redhat.ceylon.compiler.java.test.issues.bug07xx.bug708seq_.$get();
                .ceylon.language.SequenceBuilder<.ceylon.language.String> $spread$19$sequenceBuilder = new .ceylon.language.SequenceBuilder<.ceylon.language.String>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor, .ceylon.language.Null.$TypeDescriptor));
                .java.lang.Object $spread$19$iteration;
                for (.ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708<.ceylon.language.String>> $spread$19$iterator = $spread$19$iterable.iterator(); !(($spread$19$iteration = $spread$19$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708<.ceylon.language.String> $spread$19$element = (.com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708<.ceylon.language.String>)$spread$19$iteration;
                    $spread$19$sequenceBuilder.append((.ceylon.language.String)$spread$19$element.test());
                }
            }
            returning $spread$19$sequenceBuilder.getSequence();
        )};
    }
    
    public static .ceylon.language.Sequential<? extends .ceylon.language.String> $get() {
        try {
            return value[0];
        } catch (.java.lang.NullPointerException ex) {
            throw new .ceylon.language.InitializationException("Cyclic initialization");
        }
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 5)
@.com.redhat.ceylon.compiler.java.metadata.Attribute
final class bug708_cache_ {
    
    private bug708_cache_() {
    }
    private static final .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708Map<.ceylon.language.String>[] value;
    static {
        value = new .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708Map[]{new .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708Map<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor)};
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("com.redhat.ceylon.compiler.java.test.issues.bug07xx::Bug708Map<ceylon.language::String>")
    public static .com.redhat.ceylon.compiler.java.test.issues.bug07xx.Bug708Map<.ceylon.language.String> $get() {
        try {
            return value[0];
        } catch (.java.lang.NullPointerException ex) {
            throw new .ceylon.language.InitializationException("Cyclic initialization");
        }
    }
}