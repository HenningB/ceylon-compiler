package com.redhat.ceylon.compiler.java.test.issues.bug08xx;

class Bug837<Element extends .ceylon.language.Ordinal<? extends Element>> extends .java.lang.Object implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.Sequence<Element> {
    
    Bug837(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedElement, final Element first, final long length) {
        super();
        this.$reifiedElement = $reifiedElement;
        this.first = first;
        this.length = length;
        this.$ceylon$language$Sequence$this = new .ceylon.language.Sequence$impl<Element>($reifiedElement, this);
        this.$ceylon$language$Sequential$this = new .ceylon.language.Sequential$impl<Element>($reifiedElement, this);
        this.$ceylon$language$List$this = new .ceylon.language.List$impl<Element>($reifiedElement, this);
        this.$ceylon$language$Collection$this = new .ceylon.language.Collection$impl<Element>($reifiedElement, this);
        this.$ceylon$language$Iterable$this = new .ceylon.language.Iterable$impl<Element, .java.lang.Object>($reifiedElement, .ceylon.language.Null.$TypeDescriptor, this);
        this.$ceylon$language$Container$this = new .ceylon.language.Container$impl<Element, .java.lang.Object>($reifiedElement, .ceylon.language.Null.$TypeDescriptor, this);
        this.$ceylon$language$Category$this = new .ceylon.language.Category$impl(this);
        this.$ceylon$language$Cloneable$this = new .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends Element>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Collection.class, $reifiedElement), (.ceylon.language.Cloneable<.ceylon.language.Collection<? extends Element>>)(.ceylon.language.Cloneable)this);
        this.$ceylon$language$Correspondence$this = new .ceylon.language.Correspondence$impl<.ceylon.language.Integer, Element>(.ceylon.language.Integer.$TypeDescriptor, $reifiedElement, this);
        this.$ceylon$language$Ranged$this = new .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends Element>>(.ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.List.class, $reifiedElement), (.ceylon.language.Ranged<.ceylon.language.Integer, .ceylon.language.List<? extends Element>>)(.ceylon.language.Ranged)this);
        this.last = getFirst();
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedElement;
    private final long length;
    
    private final long getLength$priv() {
        return length;
    }
    protected final .ceylon.language.Sequence$impl<Element> $ceylon$language$Sequence$this;
    
    @.java.lang.Override
    public .ceylon.language.Sequence$impl<Element> $ceylon$language$Sequence$impl() {
        return $ceylon$language$Sequence$this;
    }
    
    @.java.lang.Override
    public final boolean getEmpty() {
        return $ceylon$language$Sequence$this.getEmpty();
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequence<? extends Element> getSequence() {
        return $ceylon$language$Sequence$this.getSequence();
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequence<? extends Element> sort(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return $ceylon$language$Sequence$this.sort(comparing);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Sequence<? extends Result> collect(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedResult, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Sequence$this.collect($reifiedResult, collecting);
    }
    protected final .ceylon.language.Sequential$impl<Element> $ceylon$language$Sequential$this;
    
    @.java.lang.Override
    public .ceylon.language.Sequential$impl<Element> $ceylon$language$Sequential$impl() {
        return $ceylon$language$Sequential$this;
    }
    protected final .ceylon.language.List$impl<Element> $ceylon$language$List$this;
    
    @.java.lang.Override
    public .ceylon.language.List$impl<Element> $ceylon$language$List$impl() {
        return $ceylon$language$List$this;
    }
    
    @.java.lang.Override
    public boolean defines(final .ceylon.language.Integer index) {
        return $ceylon$language$List$this.defines(index);
    }
    
    @.java.lang.Override
    public boolean equals(final .java.lang.Object that) {
        return $ceylon$language$List$this.equals(that);
    }
    
    @.java.lang.Override
    public int hashCode() {
        return $ceylon$language$List$this.hashCode();
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Sequence withLeading(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedOther, final Other element) {
        return $ceylon$language$List$this.withLeading($reifiedOther, element);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Sequence withTrailing(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedOther, final Other element) {
        return $ceylon$language$List$this.withTrailing($reifiedOther, element);
    }
    protected final .ceylon.language.Collection$impl<Element> $ceylon$language$Collection$this;
    
    @.java.lang.Override
    public .ceylon.language.Collection$impl<Element> $ceylon$language$Collection$impl() {
        return $ceylon$language$Collection$this;
    }
    protected final .ceylon.language.Iterable$impl<Element, .java.lang.Object> $ceylon$language$Iterable$this;
    
    @.java.lang.Override
    public .ceylon.language.Iterable$impl<Element, .java.lang.Object> $ceylon$language$Iterable$impl() {
        return $ceylon$language$Iterable$this;
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object> map(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedResult, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this.map($reifiedResult, collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> filter(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.filter(selecting);
    }
    
    @.java.lang.Override
    public <Result>Result fold(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedResult, final Result initial, final .ceylon.language.Callable<? extends Result> accumulating) {
        return $ceylon$language$Iterable$this.fold($reifiedResult, initial, accumulating);
    }
    
    @.java.lang.Override
    public Element find(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.find(selecting);
    }
    
    @.java.lang.Override
    public Element findLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.findLast(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends Element> select(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.select(selecting);
    }
    
    @.java.lang.Override
    public boolean any(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.any(selecting);
    }
    
    @.java.lang.Override
    public boolean every(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.every(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> skipping(final long skip) {
        return $ceylon$language$Iterable$this.skipping(skip);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> taking(final long take) {
        return $ceylon$language$Iterable$this.taking(take);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> by(final long step) {
        return $ceylon$language$Iterable$this.by(step);
    }
    
    @.java.lang.Override
    public long count(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.count(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> getCoalesced() {
        return $ceylon$language$Iterable$this.getCoalesced();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>, ? extends .java.lang.Object> getIndexed() {
        return $ceylon$language$Iterable$this.getIndexed();
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> following(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedOther, final Other head) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this.following($reifiedOther, head);
    }
    
    @.java.lang.Override
    public <Other, OtherAbsent>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends OtherAbsent> chain(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedOther, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedOtherAbsent, final .ceylon.language.Iterable<? extends Other, ? extends OtherAbsent> other) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends OtherAbsent>)$ceylon$language$Iterable$this.chain($reifiedOther, $reifiedOtherAbsent, other);
    }
    
    @.java.lang.Override
    public <Default>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> defaultNullElements(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedDefault, final Default defaultValue) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this.defaultNullElements($reifiedDefault, defaultValue);
    }
    protected final .ceylon.language.Container$impl<Element, .java.lang.Object> $ceylon$language$Container$this;
    
    @.java.lang.Override
    public .ceylon.language.Container$impl<Element, .java.lang.Object> $ceylon$language$Container$impl() {
        return $ceylon$language$Container$this;
    }
    protected final .ceylon.language.Category$impl $ceylon$language$Category$this;
    
    @.java.lang.Override
    public .ceylon.language.Category$impl $ceylon$language$Category$impl() {
        return $ceylon$language$Category$this;
    }
    
    @.java.lang.Override
    public boolean containsEvery(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this.containsEvery(elements);
    }
    
    @.java.lang.Override
    public boolean containsAny(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this.containsAny(elements);
    }
    protected final .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends Element>> $ceylon$language$Cloneable$this;
    
    @.java.lang.Override
    public .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends Element>> $ceylon$language$Cloneable$impl() {
        return $ceylon$language$Cloneable$this;
    }
    protected final .ceylon.language.Correspondence$impl<.ceylon.language.Integer, Element> $ceylon$language$Correspondence$this;
    
    @.java.lang.Override
    public .ceylon.language.Correspondence$impl<.ceylon.language.Integer, Element> $ceylon$language$Correspondence$impl() {
        return $ceylon$language$Correspondence$this;
    }
    
    @.java.lang.Override
    public .ceylon.language.Category getKeys() {
        return $ceylon$language$Correspondence$this.getKeys();
    }
    
    @.java.lang.Override
    public boolean definesEvery(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> keys) {
        return $ceylon$language$Correspondence$this.definesEvery(keys);
    }
    
    @.java.lang.Override
    public boolean definesAny(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> keys) {
        return $ceylon$language$Correspondence$this.definesAny(keys);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends Element> items(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> keys) {
        return $ceylon$language$Correspondence$this.items(keys);
    }
    protected final .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends Element>> $ceylon$language$Ranged$this;
    
    @.java.lang.Override
    public .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends Element>> $ceylon$language$Ranged$impl() {
        return $ceylon$language$Ranged$this;
    }
    private final Element first;
    
    @.java.lang.Override
    public final Element getFirst() {
        return first;
    }
    private final Element last;
    
    @.java.lang.Override
    public final Element getLast() {
        return last;
    }
    
    @.java.lang.Override
    public final Element get(final .ceylon.language.Integer index) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Integer getLastIndex() {
        return .ceylon.language.Integer.instance(getLength$priv() - 1L);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends Element> getRest() {
        return new .com.redhat.ceylon.compiler.java.test.issues.bug08xx.Bug837<Element>($reifiedElement, getFirst().getSuccessor(), getLength$priv() - 1L);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequence<? extends Element> getReversed() {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends Element> segment(final .ceylon.language.Integer from, final long length) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends Element> span(final .ceylon.language.Integer from, final .ceylon.language.Integer to) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends Element> spanFrom(final .ceylon.language.Integer from) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends Element> spanTo(final .ceylon.language.Integer to) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequence<? extends Element> getClone() {
        return this;
    }
    
    @.java.lang.Override
    public final .ceylon.language.Iterator<? extends Element> iterator() {
        return (.ceylon.language.Iterator).ceylon.language.nothing_.$get();
    }
    
    @.java.lang.Override
    public final long getSize() {
        return ((.ceylon.language.Integer).ceylon.language.nothing_.$get()).longValue();
    }
    
    @.java.lang.Override
    public final boolean contains(final .java.lang.Object o) {
        return ((.ceylon.language.Boolean).ceylon.language.nothing_.$get()).booleanValue();
    }
    
    @.java.lang.Override
    public .java.lang.String toString() {
        return ((.ceylon.language.String).ceylon.language.nothing_.$get()).toString();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.issues.bug08xx.Bug837.class, $reifiedElement);
    }
}