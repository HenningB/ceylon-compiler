package com.redhat.ceylon.compiler.java.test.statement.swtch;

abstract class SwitchMatchTop implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    SwitchMatchTop() {
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.statement.swtch.SwitchMatchTop.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.swtch.SwitchMatchTop.class);
}
final class switchMatch_foo_ extends .com.redhat.ceylon.compiler.java.test.statement.swtch.SwitchMatchTop {
    
    private switchMatch_foo_() {
        super();
    }
    private static final .com.redhat.ceylon.compiler.java.test.statement.swtch.switchMatch_foo_[] value;
    static {
        value = new .com.redhat.ceylon.compiler.java.test.statement.swtch.switchMatch_foo_[]{new .com.redhat.ceylon.compiler.java.test.statement.swtch.switchMatch_foo_()};
    }
    
    static .com.redhat.ceylon.compiler.java.test.statement.swtch.switchMatch_foo_ $get() {
        try {
            return value[0];
        } catch (.java.lang.NullPointerException ex) {
            throw new .ceylon.language.InitializationException("Cyclic initialization");
        }
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.swtch.switchMatch_foo_.class);
    }
}
final class switchMatch_bar_ extends .com.redhat.ceylon.compiler.java.test.statement.swtch.SwitchMatchTop {
    
    private switchMatch_bar_() {
        super();
    }
    private static final .com.redhat.ceylon.compiler.java.test.statement.swtch.switchMatch_bar_[] value;
    static {
        value = new .com.redhat.ceylon.compiler.java.test.statement.swtch.switchMatch_bar_[]{new .com.redhat.ceylon.compiler.java.test.statement.swtch.switchMatch_bar_()};
    }
    
    static .com.redhat.ceylon.compiler.java.test.statement.swtch.switchMatch_bar_ $get() {
        try {
            return value[0];
        } catch (.java.lang.NullPointerException ex) {
            throw new .ceylon.language.InitializationException("Cyclic initialization");
        }
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.swtch.switchMatch_bar_.class);
    }
}
class SwitchMatch implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    SwitchMatch() {
    }
    
    private final void onObject$priv() {
        final .com.redhat.ceylon.compiler.java.test.statement.swtch.SwitchMatchTop fb = .com.redhat.ceylon.compiler.java.test.statement.swtch.switchMatch_foo_.$get();
        {
            .java.lang.Object $sel$0 = fb;
            if ($sel$0 == .com.redhat.ceylon.compiler.java.test.statement.swtch.switchMatch_foo_.$get()) {
                .ceylon.language.print_.print(.ceylon.language.String.instance("foo"));
            } else if ($sel$0 == .com.redhat.ceylon.compiler.java.test.statement.swtch.switchMatch_bar_.$get()) {
                .ceylon.language.print_.print(.ceylon.language.String.instance("bar"));
            } else throw new .com.redhat.ceylon.compiler.java.language.EnumeratedTypeError("Supposedly exhaustive switch was not exhaustive");
        }
    }
    
    private final void onBoolean$priv() {
        final boolean b = true;
        {
            .java.lang.Object $sel$1 = .ceylon.language.Boolean.instance(b);
            if ($sel$1 == .ceylon.language.Boolean.instance(true)) {
                .ceylon.language.print_.print(.ceylon.language.String.instance("true"));
            } else if ($sel$1 == .ceylon.language.Boolean.instance(false)) {
                .ceylon.language.print_.print(.ceylon.language.String.instance("false"));
            } else throw new .com.redhat.ceylon.compiler.java.language.EnumeratedTypeError("Supposedly exhaustive switch was not exhaustive");
        }
    }
    
    private final <T>T box$priv(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT, final T t) {
        return t;
    }
    
    private final void onBoxedBoolean$priv() {
        final boolean b = true;
        {
            .java.lang.Object $sel$2 = <.ceylon.language.Boolean>box$priv(.ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.instance(b));
            if ($sel$2 == .ceylon.language.Boolean.instance(true)) {
                .ceylon.language.print_.print(.ceylon.language.String.instance("true"));
            } else if ($sel$2 == .ceylon.language.Boolean.instance(false)) {
                .ceylon.language.print_.print(.ceylon.language.String.instance("false"));
            } else throw new .com.redhat.ceylon.compiler.java.language.EnumeratedTypeError("Supposedly exhaustive switch was not exhaustive");
        }
    }
    
    private final void onNullableType$priv() {
        final .ceylon.language.Boolean b = .ceylon.language.Boolean.instance(true);
        {
            .java.lang.Object $sel$3 = b;
            if ($sel$3 == .ceylon.language.Boolean.instance(true)) {
                .ceylon.language.print_.print(.ceylon.language.String.instance("true"));
            } else if ($sel$3 == .ceylon.language.Boolean.instance(false)) {
                .ceylon.language.print_.print(.ceylon.language.String.instance("false"));
            } else if ($sel$3 == null) {
                .ceylon.language.print_.print(.ceylon.language.String.instance("null"));
            } else throw new .com.redhat.ceylon.compiler.java.language.EnumeratedTypeError("Supposedly exhaustive switch was not exhaustive");
        }
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.statement.swtch.SwitchMatch();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.statement.swtch.SwitchMatch.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.swtch.SwitchMatch.class);
}