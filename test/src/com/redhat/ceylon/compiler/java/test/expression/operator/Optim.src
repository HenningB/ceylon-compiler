package com.redhat.ceylon.compiler.java.test.expression.operator;

abstract class OptimSuperclass<I, F, C, S, B> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    OptimSuperclass(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedI, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedF, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedC, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedS, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedB) {
        this.$reifiedI = $reifiedI;
        this.$reifiedF = $reifiedF;
        this.$reifiedC = $reifiedC;
        this.$reifiedS = $reifiedS;
        this.$reifiedB = $reifiedB;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedI;
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedF;
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedC;
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedS;
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedB;
    
    public abstract .java.lang.Object boxedIntegerArithmetic(final I n2);
    
    public abstract .java.lang.Object boxedFloatArithmetic(final F n2);
    
    public abstract .java.lang.Object boxedStringOperators(final S s2);
    
    public abstract .java.lang.Object boxedBooleanLogical(final B b2);
    
    public abstract .java.lang.Object boxedIntegerComparison(final I n2);
    
    public abstract .java.lang.Object boxedFloatComparison(final F n2);
    
    public abstract .java.lang.Object boxedStringComparison(final S s2);
    
    public abstract .java.lang.Object boxedCharacterComparison(final C c2);
    
    public abstract .java.lang.Object boxedBooleanComparison(final B b2);
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.operator.OptimSuperclass.class, $reifiedI, $reifiedF, $reifiedC, $reifiedS, $reifiedB);
    }
}
class Optim extends .com.redhat.ceylon.compiler.java.test.expression.operator.OptimSuperclass<.ceylon.language.Integer, .ceylon.language.Float, .ceylon.language.Character, .ceylon.language.String, .ceylon.language.Boolean> {
    
    Optim() {
        super(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Float.$TypeDescriptor, .ceylon.language.Character.$TypeDescriptor, .ceylon.language.String.$TypeDescriptor, .ceylon.language.Boolean.$TypeDescriptor);
        this.fieldInteger = 0L;
    }
    
    private final long $getInteger$priv() {
        return 1L;
    }
    
    private final double $getFloat$priv() {
        return 1.0;
    }
    
    private final <T>T getBoxed$priv(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT, final T t) {
        return t;
    }
    
    private final void unboxedIntegerArithmetic$priv() {
        long n1 = 0L;
        long n2 = 0L;
        long n3 = 0L;
        n1++;
        ++n1;
        n1--;
        --n1;
        n1 = n2;
        n1 = 0L;
        n1 = $getInteger$priv();
        n1 = -n2;
        n1 = 0L;
        n1 = -$getInteger$priv();
        n1 = n2 + n3;
        n1 = n2 - n3;
        n1 = n2 * n3;
        n1 = n2 / n3;
        n1 = n2 % n3;
        n1 = .ceylon.language.Integer.instance(n2).power(.ceylon.language.Integer.instance(n3)).longValue();
        n1 = n2 += n3;
        n1 = n2 *= n3;
        n1 = n2 /= n3;
        n1 = n2 %= n3;
    }
    
    @.java.lang.Override
    public final .java.lang.Object boxedIntegerArithmetic(final .ceylon.language.Integer n2) {
        long n1 = 0L;
        long n3 = 0L;
        n1++;
        ++n1;
        n1--;
        --n1;
        n1 = n2.getPositiveValue().longValue();
        n1 = 0L;
        n1 = <.ceylon.language.Integer>getBoxed$priv(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(1L)).getPositiveValue().longValue();
        n1 = n2.getNegativeValue().longValue();
        n1 = 0L;
        n1 = <.ceylon.language.Integer>getBoxed$priv(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(1L)).getNegativeValue().longValue();
        n1 = n2.plus(.ceylon.language.Integer.instance(n3)).longValue();
        n1 = n2.minus(.ceylon.language.Integer.instance(n3)).longValue();
        n1 = n2.times(.ceylon.language.Integer.instance(n3)).longValue();
        n1 = n2.divided(.ceylon.language.Integer.instance(n3)).longValue();
        n1 = n2.remainder(.ceylon.language.Integer.instance(n3)).longValue();
        n1 = n2.power(.ceylon.language.Integer.instance(n3)).longValue();
        n1 = (
            let
            {
                .ceylon.language.Integer $ceylontmpop0 = .ceylon.language.Integer.instance(n3).plus(n2);
                n3 = $ceylontmpop0.longValue();
            }
            returning $ceylontmpop0;
        ).longValue();
        n1 = (
            let
            {
                .ceylon.language.Integer $ceylontmpop1 = .ceylon.language.Integer.instance(n3).times(n2);
                n3 = $ceylontmpop1.longValue();
            }
            returning $ceylontmpop1;
        ).longValue();
        n1 = (
            let
            {
                .ceylon.language.Integer $ceylontmpop2 = .ceylon.language.Integer.instance(n3).divided(n2);
                n3 = $ceylontmpop2.longValue();
            }
            returning $ceylontmpop2;
        ).longValue();
        n1 = (
            let
            {
                .ceylon.language.Integer $ceylontmpop3 = .ceylon.language.Integer.instance(n3).remainder(n2);
                n3 = $ceylontmpop3.longValue();
            }
            returning $ceylontmpop3;
        ).longValue();
        return null;
    }
    
    private final void unboxedFloatArithmetic$priv() {
        double n1 = 0.0;
        double n2 = 0.0;
        double n3 = 0.0;
        n1 = n2;
        n1 = 0.0;
        n1 = $getFloat$priv();
        n1 = -n2;
        n1 = -0.0;
        n1 = -$getFloat$priv();
        n1 = n2 + n3;
        n1 = n2 - n3;
        n1 = n2 * n3;
        n1 = n2 / n3;
        n1 = .ceylon.language.Float.instance(n2).power(.ceylon.language.Float.instance(n3)).doubleValue();
        n1 = n2 += n3;
        n1 = n2 *= n3;
        n1 = n2 /= n3;
    }
    
    @.java.lang.Override
    public final .java.lang.Object boxedFloatArithmetic(final .ceylon.language.Float n2) {
        double n1 = 0.0;
        double n3 = 0.0;
        n1 = n2.getPositiveValue().doubleValue();
        n1 = 0.0;
        n1 = <.ceylon.language.Float>getBoxed$priv(.ceylon.language.Float.$TypeDescriptor, .ceylon.language.Float.instance(0.0)).getPositiveValue().doubleValue();
        n1 = n2.getNegativeValue().doubleValue();
        n1 = -0.0;
        n1 = <.ceylon.language.Float>getBoxed$priv(.ceylon.language.Float.$TypeDescriptor, .ceylon.language.Float.instance(0.0)).getNegativeValue().doubleValue();
        n1 = n2.plus(.ceylon.language.Float.instance(n3)).doubleValue();
        n1 = n2.minus(.ceylon.language.Float.instance(n3)).doubleValue();
        n1 = n2.times(.ceylon.language.Float.instance(n3)).doubleValue();
        n1 = n2.divided(.ceylon.language.Float.instance(n3)).doubleValue();
        n1 = n2.power(.ceylon.language.Float.instance(n3)).doubleValue();
        n1 = (
            let
            {
                .ceylon.language.Float $ceylontmpop4 = .ceylon.language.Float.instance(n3).plus(n2);
                n3 = $ceylontmpop4.doubleValue();
            }
            returning $ceylontmpop4;
        ).doubleValue();
        n1 = (
            let
            {
                .ceylon.language.Float $ceylontmpop5 = .ceylon.language.Float.instance(n3).times(n2);
                n3 = $ceylontmpop5.doubleValue();
            }
            returning $ceylontmpop5;
        ).doubleValue();
        n1 = (
            let
            {
                .ceylon.language.Float $ceylontmpop6 = .ceylon.language.Float.instance(n3).divided(n2);
                n3 = $ceylontmpop6.doubleValue();
            }
            returning $ceylontmpop6;
        ).doubleValue();
        return null;
    }
    
    private final void unboxedCharacterArithmetic$priv() {
        int n1 = 97;
        int n2 = 97;
        int n3 = 97;
        n1++;
        ++n1;
        n1--;
        --n1;
    }
    
    private final void unboxedBooleanLogical$priv() {
        boolean b1 = false;
        boolean b2 = false;
        boolean b3 = false;
        b1 = b2;
        b1 = !b2;
        b1 = b2 && b3;
        b1 = b2 || b3;
        b1 = b2 |= b3;
        b1 = b2 &= b3;
    }
    
    @.java.lang.Override
    public final .java.lang.Object boxedBooleanLogical(final .ceylon.language.Boolean b2) {
        boolean b1 = false;
        boolean b3 = false;
        b1 = b2.booleanValue();
        b1 = !b2.booleanValue();
        b1 = b2.booleanValue() && b3;
        b1 = b2.booleanValue() || b3;
        b1 = b3 |= b2.booleanValue();
        b1 = b3 &= b2.booleanValue();
        return null;
    }
    
    private final void unboxedStringOperators$priv() {
        .java.lang.String s1 = "";
        .java.lang.String s2 = "";
        .java.lang.String s3 = "";
        s1 = s2 + s3;
        s1 = s2 += s3;
    }
    
    @.java.lang.Override
    public final .java.lang.Object boxedStringOperators(final .ceylon.language.String s2) {
        .java.lang.String s1 = "";
        .java.lang.String s3 = "";
        s1 = s2.plus(.ceylon.language.String.instance(s3)).toString();
        s1 = (
            let
            {
                .ceylon.language.String $ceylontmpop7 = .ceylon.language.String.instance(s3).plus(s2);
                s3 = $ceylontmpop7.toString();
            }
            returning $ceylontmpop7;
        ).toString();
        return null;
    }
    private long fieldInteger;
    
    private final long getFieldInteger$priv() {
        return fieldInteger;
    }
    
    private final void setFieldInteger$priv(final long fieldInteger) {
        this.fieldInteger = fieldInteger;
    }
    
    private final long getFieldGetterInteger$priv() {
        return 0L;
    }
    
    private final void setFieldGetterInteger$priv(final long fieldGetterInteger) {
    }
    
    private final void nonOptimisableArithmetic$priv() {
        
        final class localGetterInteger$getter_ implements .com.redhat.ceylon.compiler.java.language.GetterLong {
            
            private localGetterInteger$getter_() {
            }
            
            public long $get() {
                return 0L;
            }
        }
        final .com.redhat.ceylon.compiler.java.language.GetterLong localGetterInteger$getter_ = new localGetterInteger$getter_();
        
        final class localGetterInteger$setter_ {
            
            private localGetterInteger$setter_() {
            }
            private long value;
            
            public void $set(final long localGetterInteger) {
            }
        }
        final localGetterInteger$setter_ localGetterInteger$setter_ = new localGetterInteger$setter_();
        setFieldInteger$priv((
            let
            {
                long $ceylontmpop8 = getFieldInteger$priv();
                setFieldInteger$priv($ceylontmpop8 + 1);
            }
            returning $ceylontmpop8;
        ));
        this.setFieldInteger$priv((
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.Optim $ceylontmpopE9 = this;
                long $ceylontmpopV10 = $ceylontmpopE9.getFieldInteger$priv();
                $ceylontmpopE9.setFieldInteger$priv($ceylontmpopV10 + 1);
            }
            returning $ceylontmpopV10;
        ));
        setFieldGetterInteger$priv((
            let
            {
                long $ceylontmpop11 = getFieldGetterInteger$priv();
                setFieldGetterInteger$priv($ceylontmpop11 + 1);
            }
            returning $ceylontmpop11;
        ));
        localGetterInteger$setter_.$set((
            let
            {
                long $ceylontmpop12 = localGetterInteger$getter_.$get();
                localGetterInteger$setter_.$set($ceylontmpop12 + 1);
            }
            returning $ceylontmpop12;
        ));
        .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger_.$set((
            let
            {
                long $ceylontmpop13 = .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger_.$get();
                .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger_.$set($ceylontmpop13 + 1);
            }
            returning $ceylontmpop13;
        ));
        setFieldInteger$priv((
            let
            {
                long $ceylontmpop14 = getFieldInteger$priv() + 1;
                setFieldInteger$priv($ceylontmpop14);
            }
            returning $ceylontmpop14;
        ));
        this.setFieldInteger$priv((
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.Optim $ceylontmpopE15 = this;
                long $ceylontmpopV16 = $ceylontmpopE15.getFieldInteger$priv() + 1;
                $ceylontmpopE15.setFieldInteger$priv($ceylontmpopV16);
            }
            returning $ceylontmpopV16;
        ));
        setFieldGetterInteger$priv((
            let
            {
                long $ceylontmpop17 = getFieldGetterInteger$priv() + 1;
                setFieldGetterInteger$priv($ceylontmpop17);
            }
            returning $ceylontmpop17;
        ));
        localGetterInteger$setter_.$set((
            let
            {
                long $ceylontmpop18 = localGetterInteger$getter_.$get() + 1;
                localGetterInteger$setter_.$set($ceylontmpop18);
            }
            returning $ceylontmpop18;
        ));
        .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger_.$set((
            let
            {
                long $ceylontmpop19 = .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger_.$get() + 1;
                .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger_.$set($ceylontmpop19);
            }
            returning $ceylontmpop19;
        ));
        setFieldInteger$priv((
            let
            {
                long $ceylontmpop20 = getFieldInteger$priv() + getFieldInteger$priv();
                setFieldInteger$priv($ceylontmpop20);
            }
            returning $ceylontmpop20;
        ));
        this.setFieldInteger$priv((
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.Optim $ceylontmpopE21 = this;
                long $ceylontmpopV22 = $ceylontmpopE21.getFieldInteger$priv() + this.getFieldInteger$priv();
                $ceylontmpopE21.setFieldInteger$priv($ceylontmpopV22);
            }
            returning $ceylontmpopV22;
        ));
        setFieldGetterInteger$priv((
            let
            {
                long $ceylontmpop23 = getFieldGetterInteger$priv() + getFieldGetterInteger$priv();
                setFieldGetterInteger$priv($ceylontmpop23);
            }
            returning $ceylontmpop23;
        ));
        localGetterInteger$setter_.$set((
            let
            {
                long $ceylontmpop24 = localGetterInteger$getter_.$get() + localGetterInteger$getter_.$get();
                localGetterInteger$setter_.$set($ceylontmpop24);
            }
            returning $ceylontmpop24;
        ));
        .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger_.$set((
            let
            {
                long $ceylontmpop25 = .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger_.$get() + .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger_.$get();
                .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger_.$set($ceylontmpop25);
            }
            returning $ceylontmpop25;
        ));
    }
    
    private final void unboxedIntegerComparison$priv() {
        long n1 = 0L;
        long n2 = 0L;
        boolean sync = false;
        sync = n1 == n2;
        sync = !(n1 == n2);
        final .ceylon.language.Comparison c = .ceylon.language.Integer.instance(n1).compare(.ceylon.language.Integer.instance(n2));
        sync = n1 < n2;
        sync = n1 > n2;
        sync = n1 <= n2;
        sync = n1 >= n2;
    }
    
    @.java.lang.Override
    public final .java.lang.Object boxedIntegerComparison(final .ceylon.language.Integer n2) {
        long n1 = 0L;
        boolean sync = false;
        sync = .ceylon.language.Integer.instance(n1).equals(n2);
        sync = !.ceylon.language.Integer.instance(n1).equals(n2);
        final .ceylon.language.Comparison c = .ceylon.language.Integer.instance(n1).compare(n2);
        sync = .ceylon.language.Integer.instance(n1).compare(n2).smallerThan();
        sync = .ceylon.language.Integer.instance(n1).compare(n2).largerThan();
        sync = .ceylon.language.Integer.instance(n1).compare(n2).asSmallAs();
        sync = .ceylon.language.Integer.instance(n1).compare(n2).asLargeAs();
        return null;
    }
    
    private final void unboxedFloatComparison$priv() {
        double n1 = 0.0;
        double n2 = 0.0;
        boolean sync = false;
        sync = n1 == n2;
        sync = !(n1 == n2);
        final .ceylon.language.Comparison c = .ceylon.language.Float.instance(n1).compare(.ceylon.language.Float.instance(n2));
        sync = n1 < n2;
        sync = n1 > n2;
        sync = n1 <= n2;
        sync = n1 >= n2;
    }
    
    @.java.lang.Override
    public final .java.lang.Object boxedFloatComparison(final .ceylon.language.Float n2) {
        double n1 = 0.0;
        boolean sync = false;
        sync = .ceylon.language.Float.instance(n1).equals(n2);
        sync = !.ceylon.language.Float.instance(n1).equals(n2);
        final .ceylon.language.Comparison c = .ceylon.language.Float.instance(n1).compare(n2);
        sync = .ceylon.language.Float.instance(n1).compare(n2).smallerThan();
        sync = .ceylon.language.Float.instance(n1).compare(n2).largerThan();
        sync = .ceylon.language.Float.instance(n1).compare(n2).asSmallAs();
        sync = .ceylon.language.Float.instance(n1).compare(n2).asLargeAs();
        return null;
    }
    
    private final void unboxedCharacterComparison$priv() {
        int n1 = 97;
        int n2 = 97;
        boolean sync = false;
        sync = n1 == n2;
        sync = !(n1 == n2);
        final .ceylon.language.Comparison c = .ceylon.language.Character.instance(n1).compare(.ceylon.language.Character.instance(n2));
        sync = n1 < n2;
        sync = n1 > n2;
        sync = n1 <= n2;
        sync = n1 >= n2;
    }
    
    @.java.lang.Override
    public final .java.lang.Object boxedCharacterComparison(final .ceylon.language.Character n2) {
        int n1 = 97;
        boolean sync = false;
        sync = .ceylon.language.Character.instance(n1).equals(n2);
        sync = !.ceylon.language.Character.instance(n1).equals(n2);
        final .ceylon.language.Comparison c = .ceylon.language.Character.instance(n1).compare(n2);
        sync = .ceylon.language.Character.instance(n1).compare(n2).smallerThan();
        sync = .ceylon.language.Character.instance(n1).compare(n2).largerThan();
        sync = .ceylon.language.Character.instance(n1).compare(n2).asSmallAs();
        sync = .ceylon.language.Character.instance(n1).compare(n2).asLargeAs();
        return null;
    }
    
    private final void unboxedBooleanComparison$priv() {
        boolean b1 = false;
        boolean b2 = false;
        boolean sync = false;
        sync = b1 == b2;
        sync = b1 == b2;
        sync = !(b1 == b2);
    }
    
    @.java.lang.Override
    public final .java.lang.Object boxedBooleanComparison(final .ceylon.language.Boolean b2) {
        boolean b1 = false;
        boolean sync = false;
        sync = .ceylon.language.Boolean.instance(b1) == b2;
        sync = .ceylon.language.Boolean.instance(b1).equals(b2);
        sync = !.ceylon.language.Boolean.instance(b1).equals(b2);
        return null;
    }
    
    private final void unboxedStringComparison$priv() {
        .java.lang.String s1 = "";
        .java.lang.String s2 = "";
        boolean sync = false;
        sync = s1.equals(s2);
        sync = !s1.equals(s2);
        final .ceylon.language.Comparison c = .ceylon.language.String.instance(s1).compare(.ceylon.language.String.instance(s2));
        sync = .ceylon.language.String.instance(s1).compare(.ceylon.language.String.instance(s2)).smallerThan();
        sync = .ceylon.language.String.instance(s1).compare(.ceylon.language.String.instance(s2)).largerThan();
        sync = .ceylon.language.String.instance(s1).compare(.ceylon.language.String.instance(s2)).asSmallAs();
        sync = .ceylon.language.String.instance(s1).compare(.ceylon.language.String.instance(s2)).asLargeAs();
    }
    
    @.java.lang.Override
    public final .java.lang.Object boxedStringComparison(final .ceylon.language.String s2) {
        .java.lang.String s1 = "";
        boolean sync = false;
        sync = .ceylon.language.String.instance(s1).equals(s2);
        sync = !.ceylon.language.String.instance(s1).equals(s2);
        final .ceylon.language.Comparison c = .ceylon.language.String.instance(s1).compare(s2);
        sync = .ceylon.language.String.instance(s1).compare(s2).smallerThan();
        sync = .ceylon.language.String.instance(s1).compare(s2).largerThan();
        sync = .ceylon.language.String.instance(s1).compare(s2).asSmallAs();
        sync = .ceylon.language.String.instance(s1).compare(s2).asLargeAs();
        return null;
    }
    
    private final void nonOptimisableComparison$priv(final .java.lang.Object o) {
        .java.lang.String s1 = "";
        boolean b2 = false;
        boolean sync = false;
        sync = o == .ceylon.language.Boolean.instance(b2);
        sync = .ceylon.language.String.instance(s1).equals(.ceylon.language.Boolean.instance(b2));
        sync = !.ceylon.language.String.instance(s1).equals(.ceylon.language.Boolean.instance(b2));
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.operator.Optim();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.Optim.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.operator.Optim.class);
}
final class optimToplevelInteger_ {
    
    private optimToplevelInteger_() {
    }
    private static long[] value;
    static {
        value = new long[]{0L};
    }
    
    public static long $get() {
        try {
            return value[0];
        } catch (.java.lang.NullPointerException ex) {
            throw new .ceylon.language.InitializationException("Cyclic initialization");
        }
    }
    
    public static void $set(final long optimToplevelInteger) {
        value[0] = optimToplevelInteger;
    }
}