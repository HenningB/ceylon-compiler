package com.redhat.ceylon.compiler.java.test.issues.bug09xx;

class Bug979Iterable implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.Iterable<.ceylon.language.String, .java.lang.Object> {
    
    Bug979Iterable(final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> strings) {
        this.strings = strings;
        this.$ceylon$language$Iterable$this = new .ceylon.language.Iterable$impl<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor, .ceylon.language.Null.$TypeDescriptor, this);
        this.$ceylon$language$Container$this = new .ceylon.language.Container$impl<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor, .ceylon.language.Null.$TypeDescriptor, this);
        this.$ceylon$language$Category$this = new .ceylon.language.Category$impl(this);
    }
    private final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> strings;
    
    private final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> getStrings$priv() {
        return strings;
    }
    protected final .ceylon.language.Iterable$impl<.ceylon.language.String, .java.lang.Object> $ceylon$language$Iterable$this;
    
    @.java.lang.Override
    public .ceylon.language.Iterable$impl<.ceylon.language.String, .java.lang.Object> $ceylon$language$Iterable$impl() {
        return $ceylon$language$Iterable$this;
    }
    
    @.java.lang.Override
    public boolean getEmpty() {
        return $ceylon$language$Iterable$this.getEmpty();
    }
    
    @.java.lang.Override
    public long getSize() {
        return $ceylon$language$Iterable$this.getSize();
    }
    
    @.java.lang.Override
    public boolean contains(final .java.lang.Object element) {
        return $ceylon$language$Iterable$this.contains(element);
    }
    
    @.java.lang.Override
    public .ceylon.language.String getFirst() {
        return (.ceylon.language.String)$ceylon$language$Iterable$this.getFirst();
    }
    
    @.java.lang.Override
    public .ceylon.language.String getLast() {
        return (.ceylon.language.String)$ceylon$language$Iterable$this.getLast();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> getRest() {
        return $ceylon$language$Iterable$this.getRest();
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends .ceylon.language.String> getSequence() {
        return $ceylon$language$Iterable$this.getSequence();
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object> map(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedResult, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this.map($reifiedResult, collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> filter(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.filter(selecting);
    }
    
    @.java.lang.Override
    public <Result>Result fold(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedResult, final Result initial, final .ceylon.language.Callable<? extends Result> accumulating) {
        return $ceylon$language$Iterable$this.fold($reifiedResult, initial, accumulating);
    }
    
    @.java.lang.Override
    public .ceylon.language.String find(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.find(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.String findLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.findLast(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends .ceylon.language.String> sort(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return $ceylon$language$Iterable$this.sort(comparing);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Sequential<? extends Result> collect(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedResult, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this.collect($reifiedResult, collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends .ceylon.language.String> select(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.select(selecting);
    }
    
    @.java.lang.Override
    public boolean any(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.any(selecting);
    }
    
    @.java.lang.Override
    public boolean every(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.every(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> skipping(final long skip) {
        return $ceylon$language$Iterable$this.skipping(skip);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> taking(final long take) {
        return $ceylon$language$Iterable$this.taking(take);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> by(final long step) {
        return $ceylon$language$Iterable$this.by(step);
    }
    
    @.java.lang.Override
    public long count(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.count(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> getCoalesced() {
        return $ceylon$language$Iterable$this.getCoalesced();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.String>, ? extends .java.lang.Object> getIndexed() {
        return $ceylon$language$Iterable$this.getIndexed();
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> following(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedOther, final Other head) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this.following($reifiedOther, head);
    }
    
    @.java.lang.Override
    public <Other, OtherAbsent>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends OtherAbsent> chain(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedOther, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedOtherAbsent, final .ceylon.language.Iterable<? extends Other, ? extends OtherAbsent> other) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends OtherAbsent>)$ceylon$language$Iterable$this.chain($reifiedOther, $reifiedOtherAbsent, other);
    }
    
    @.java.lang.Override
    public <Default>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> defaultNullElements(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedDefault, final Default defaultValue) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this.defaultNullElements($reifiedDefault, defaultValue);
    }
    
    @.java.lang.Override
    public .java.lang.String toString() {
        return $ceylon$language$Iterable$this.toString();
    }
    protected final .ceylon.language.Container$impl<.ceylon.language.String, .java.lang.Object> $ceylon$language$Container$this;
    
    @.java.lang.Override
    public .ceylon.language.Container$impl<.ceylon.language.String, .java.lang.Object> $ceylon$language$Container$impl() {
        return $ceylon$language$Container$this;
    }
    protected final .ceylon.language.Category$impl $ceylon$language$Category$this;
    
    @.java.lang.Override
    public .ceylon.language.Category$impl $ceylon$language$Category$impl() {
        return $ceylon$language$Category$this;
    }
    
    @.java.lang.Override
    public boolean containsEvery(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this.containsEvery(elements);
    }
    
    @.java.lang.Override
    public boolean containsAny(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this.containsAny(elements);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Iterator<? extends .ceylon.language.String> iterator() {
        return getStrings$priv().iterator();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.issues.bug09xx.Bug979Iterable.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.issues.bug09xx.Bug979Iterable.class);
}
class Bug979Set extends .java.lang.Object implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.Set<.ceylon.language.String> {
    
    Bug979Set(final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> strings) {
        super();
        this.strings = strings;
        this.$ceylon$language$Set$this = new .ceylon.language.Set$impl<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor, this);
        this.$ceylon$language$Collection$this = new .ceylon.language.Collection$impl<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor, this);
        this.$ceylon$language$Iterable$this = new .ceylon.language.Iterable$impl<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor, .ceylon.language.Null.$TypeDescriptor, this);
        this.$ceylon$language$Container$this = new .ceylon.language.Container$impl<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor, .ceylon.language.Null.$TypeDescriptor, this);
        this.$ceylon$language$Category$this = new .ceylon.language.Category$impl(this);
        this.$ceylon$language$Cloneable$this = new .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends .ceylon.language.String>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Collection.class, .ceylon.language.String.$TypeDescriptor), (.ceylon.language.Cloneable<.ceylon.language.Collection<? extends .ceylon.language.String>>)(.ceylon.language.Cloneable)this);
    }
    private final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> strings;
    
    private final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> getStrings$priv() {
        return strings;
    }
    protected final .ceylon.language.Set$impl<.ceylon.language.String> $ceylon$language$Set$this;
    
    @.java.lang.Override
    public .ceylon.language.Set$impl<.ceylon.language.String> $ceylon$language$Set$impl() {
        return $ceylon$language$Set$this;
    }
    
    @.java.lang.Override
    public boolean superset(final .ceylon.language.Set<? extends .java.lang.Object> set) {
        return $ceylon$language$Set$this.superset(set);
    }
    
    @.java.lang.Override
    public boolean subset(final .ceylon.language.Set<? extends .java.lang.Object> set) {
        return $ceylon$language$Set$this.subset(set);
    }
    
    @.java.lang.Override
    public boolean equals(final .java.lang.Object that) {
        return $ceylon$language$Set$this.equals(that);
    }
    
    @.java.lang.Override
    public int hashCode() {
        return $ceylon$language$Set$this.hashCode();
    }
    protected final .ceylon.language.Collection$impl<.ceylon.language.String> $ceylon$language$Collection$this;
    
    @.java.lang.Override
    public .ceylon.language.Collection$impl<.ceylon.language.String> $ceylon$language$Collection$impl() {
        return $ceylon$language$Collection$this;
    }
    
    @.java.lang.Override
    public boolean getEmpty() {
        return $ceylon$language$Collection$this.getEmpty();
    }
    
    @.java.lang.Override
    public boolean contains(final .java.lang.Object element) {
        return $ceylon$language$Collection$this.contains(element);
    }
    
    @.java.lang.Override
    public .java.lang.String toString() {
        return $ceylon$language$Collection$this.toString();
    }
    protected final .ceylon.language.Iterable$impl<.ceylon.language.String, .java.lang.Object> $ceylon$language$Iterable$this;
    
    @.java.lang.Override
    public .ceylon.language.Iterable$impl<.ceylon.language.String, .java.lang.Object> $ceylon$language$Iterable$impl() {
        return $ceylon$language$Iterable$this;
    }
    
    @.java.lang.Override
    public long getSize() {
        return $ceylon$language$Iterable$this.getSize();
    }
    
    @.java.lang.Override
    public .ceylon.language.String getFirst() {
        return (.ceylon.language.String)$ceylon$language$Iterable$this.getFirst();
    }
    
    @.java.lang.Override
    public .ceylon.language.String getLast() {
        return (.ceylon.language.String)$ceylon$language$Iterable$this.getLast();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> getRest() {
        return $ceylon$language$Iterable$this.getRest();
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends .ceylon.language.String> getSequence() {
        return $ceylon$language$Iterable$this.getSequence();
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object> map(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedResult, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this.map($reifiedResult, collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> filter(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.filter(selecting);
    }
    
    @.java.lang.Override
    public <Result>Result fold(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedResult, final Result initial, final .ceylon.language.Callable<? extends Result> accumulating) {
        return $ceylon$language$Iterable$this.fold($reifiedResult, initial, accumulating);
    }
    
    @.java.lang.Override
    public .ceylon.language.String find(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.find(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.String findLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.findLast(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends .ceylon.language.String> sort(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return $ceylon$language$Iterable$this.sort(comparing);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Sequential<? extends Result> collect(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedResult, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this.collect($reifiedResult, collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends .ceylon.language.String> select(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.select(selecting);
    }
    
    @.java.lang.Override
    public boolean any(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.any(selecting);
    }
    
    @.java.lang.Override
    public boolean every(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.every(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> skipping(final long skip) {
        return $ceylon$language$Iterable$this.skipping(skip);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> taking(final long take) {
        return $ceylon$language$Iterable$this.taking(take);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> by(final long step) {
        return $ceylon$language$Iterable$this.by(step);
    }
    
    @.java.lang.Override
    public long count(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.count(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> getCoalesced() {
        return $ceylon$language$Iterable$this.getCoalesced();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.String>, ? extends .java.lang.Object> getIndexed() {
        return $ceylon$language$Iterable$this.getIndexed();
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> following(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedOther, final Other head) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this.following($reifiedOther, head);
    }
    
    @.java.lang.Override
    public <Other, OtherAbsent>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends OtherAbsent> chain(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedOther, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedOtherAbsent, final .ceylon.language.Iterable<? extends Other, ? extends OtherAbsent> other) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends OtherAbsent>)$ceylon$language$Iterable$this.chain($reifiedOther, $reifiedOtherAbsent, other);
    }
    
    @.java.lang.Override
    public <Default>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> defaultNullElements(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedDefault, final Default defaultValue) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this.defaultNullElements($reifiedDefault, defaultValue);
    }
    protected final .ceylon.language.Container$impl<.ceylon.language.String, .java.lang.Object> $ceylon$language$Container$this;
    
    @.java.lang.Override
    public .ceylon.language.Container$impl<.ceylon.language.String, .java.lang.Object> $ceylon$language$Container$impl() {
        return $ceylon$language$Container$this;
    }
    protected final .ceylon.language.Category$impl $ceylon$language$Category$this;
    
    @.java.lang.Override
    public .ceylon.language.Category$impl $ceylon$language$Category$impl() {
        return $ceylon$language$Category$this;
    }
    
    @.java.lang.Override
    public boolean containsEvery(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this.containsEvery(elements);
    }
    
    @.java.lang.Override
    public boolean containsAny(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this.containsAny(elements);
    }
    protected final .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends .ceylon.language.String>> $ceylon$language$Cloneable$this;
    
    @.java.lang.Override
    public .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends .ceylon.language.String>> $ceylon$language$Cloneable$impl() {
        return $ceylon$language$Cloneable$this;
    }
    
    @.java.lang.Override
    public final .ceylon.language.Iterator<? extends .ceylon.language.String> iterator() {
        return getStrings$priv().iterator();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Set<? extends .ceylon.language.String> getClone() {
        return this;
    }
    
    @.java.lang.Override
    public final <Other>.ceylon.language.Set<? extends .ceylon.language.String> complement(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedOther, final .ceylon.language.Set<? extends Other> set) {
        return (.ceylon.language.Set).ceylon.language.nothing_.$get();
    }
    
    @.java.lang.Override
    public final <Other>.ceylon.language.Set exclusiveUnion(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedOther, final .ceylon.language.Set<? extends Other> set) {
        return (.ceylon.language.Set).ceylon.language.nothing_.$get();
    }
    
    @.java.lang.Override
    public final <Other>.ceylon.language.Set intersection(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedOther, final .ceylon.language.Set<? extends Other> set) {
        return (.ceylon.language.Set).ceylon.language.nothing_.$get();
    }
    
    @.java.lang.Override
    public final <Other>.ceylon.language.Set union(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedOther, final .ceylon.language.Set<? extends Other> set) {
        return (.ceylon.language.Set).ceylon.language.nothing_.$get();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.issues.bug09xx.Bug979Set.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.issues.bug09xx.Bug979Set.class);
}