package com.redhat.ceylon.compiler.java.test.annotations;

@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.java.lang.annotation.Target({})
@interface CollidingLiteralDefaults$annotation$ {
    
    public abstract long i1();
    
    public abstract long i2();
}
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.java.lang.annotation.Target({
        .java.lang.annotation.ElementType.PARAMETER,
        .java.lang.annotation.ElementType.METHOD})
@interface CollidingLiteralDefaults$annotations$ {
    
    public abstract .com.redhat.ceylon.compiler.java.test.annotations.CollidingLiteralDefaults$annotation$[] value();
}
@.ceylon.language.FinalAnnotation$annotation$
@.ceylon.language.AnnotationAnnotation$annotation$
final class CollidingLiteralDefaults implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.SequencedAnnotation<.com.redhat.ceylon.compiler.java.test.annotations.CollidingLiteralDefaults, .ceylon.language.meta.declaration.FunctionDeclaration> {
    
    CollidingLiteralDefaults(.com.redhat.ceylon.compiler.java.test.annotations.CollidingLiteralDefaults$annotation$ anno) {
        this(anno.i1(), anno.i2());
    }
    
    CollidingLiteralDefaults(final long i1, final long i2) {
        this.i1 = i1;
        this.i2 = i2;
        this.$ceylon$language$ConstrainedAnnotation$this$ = new .ceylon.language.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.CollidingLiteralDefaults, .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.annotations.CollidingLiteralDefaults>, .ceylon.language.meta.declaration.FunctionDeclaration>(.com.redhat.ceylon.compiler.java.test.annotations.CollidingLiteralDefaults.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .com.redhat.ceylon.compiler.java.test.annotations.CollidingLiteralDefaults.$TypeDescriptor$), .ceylon.language.meta.declaration.FunctionDeclaration.$TypeDescriptor$, this);
    }
    private final long i1;
    
    @.ceylon.language.SharedAnnotation$annotation$
    public final long getI1() {
        return i1;
    }
    private final long i2;
    
    @.ceylon.language.SharedAnnotation$annotation$
    public final long getI2() {
        return i2;
    }
    protected final .ceylon.language.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.CollidingLiteralDefaults, .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.annotations.CollidingLiteralDefaults>, .ceylon.language.meta.declaration.FunctionDeclaration> $ceylon$language$ConstrainedAnnotation$this$;
    
    @.java.lang.Override
    public .ceylon.language.ConstrainedAnnotation$impl<? extends .com.redhat.ceylon.compiler.java.test.annotations.CollidingLiteralDefaults, ? extends .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.annotations.CollidingLiteralDefaults>, ? super .ceylon.language.meta.declaration.FunctionDeclaration> $ceylon$language$ConstrainedAnnotation$impl() {
        return $ceylon$language$ConstrainedAnnotation$this$;
    }
    
    @.java.lang.Override
    public final boolean occurs(final .ceylon.language.Annotated programElement) {
        return $ceylon$language$ConstrainedAnnotation$this$.occurs(programElement);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.annotations.CollidingLiteralDefaults.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.annotations.CollidingLiteralDefaults.class);
}
@.com.redhat.ceylon.compiler.java.metadata.AnnotationInstantiation(
        arguments = {
                -32768,
                0},
        primary = .com.redhat.ceylon.compiler.java.test.annotations.CollidingLiteralDefaults.class)
@.com.redhat.ceylon.compiler.java.metadata.IntegerExprs({@.com.redhat.ceylon.compiler.java.metadata.IntegerValue(
        name = "$arg$i1",
        value = 1L)})
final class collidingLiteralDefaults_ {
    
    private collidingLiteralDefaults_() {
    }
    
    static .com.redhat.ceylon.compiler.java.test.annotations.CollidingLiteralDefaults collidingLiteralDefaults() {
        return (
            let
            {
                long $ceylontmp$i1$0 = .com.redhat.ceylon.compiler.java.test.annotations.collidingLiteralDefaults_.collidingLiteralDefaults$i1();
            }
            returning collidingLiteralDefaults($ceylontmp$i1$0);
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.IntegerValue(2L)
    public static final long collidingLiteralDefaults$i1() {
        return 2L;
    }
    
    @.ceylon.language.AnnotationAnnotation$annotation$
    static .com.redhat.ceylon.compiler.java.test.annotations.CollidingLiteralDefaults collidingLiteralDefaults(final long i1) {
        return new .com.redhat.ceylon.compiler.java.test.annotations.CollidingLiteralDefaults(1L, i1);
    }
}
final class collidingLiteralDefaults_callsite_ {
    
    private collidingLiteralDefaults_callsite_() {
    }
    
    @.com.redhat.ceylon.compiler.java.test.annotations.CollidingLiteralDefaults$annotations$({@.com.redhat.ceylon.compiler.java.test.annotations.CollidingLiteralDefaults$annotation$(
            i1 = 1L,
            i2 = 2L)})
    static void collidingLiteralDefaults_callsite() {
    }
}