package com.redhat.ceylon.compiler.java.test.statement.loop.optim;

@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.com.redhat.ceylon.compiler.java.metadata.Method
final class bug2130Span_ {
    
    private bug2130Span_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    static void bug2130Span() {
        final long $ceylontmp$start$0 = 0L;
        final long $ceylontmp$end$1 = 0L;
        final long $ceylontmp$by$2 = 1L;
        if ($ceylontmp$by$2 <= 0) throw new .ceylon.language.AssertionError("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
        final boolean $ceylontmp$increasing$3 = .ceylon.language.Integer.offsetSign($ceylontmp$end$1, $ceylontmp$start$0) >= 0;
        final long $ceylontmp$incr$4 = $ceylontmp$increasing$3 ? $ceylontmp$by$2 : -$ceylontmp$by$2;
        loop_0: for (long i$5 = $ceylontmp$start$0; .ceylon.language.Integer.offsetSign(i$5, $ceylontmp$end$1) <= 0L && .ceylon.language.Integer.offsetSign(i$5, $ceylontmp$start$0) >= 0L; i$5 = .ceylon.language.Integer.neighbour(i$5, $ceylontmp$incr$4)) {
            final long i = i$5;
        }
        final long $ceylontmp$start$6 = .ceylon.language.runtime_.get_().getMaxIntegerValue().longValue();
        final long $ceylontmp$end$7 = .ceylon.language.runtime_.get_().getMaxIntegerValue().longValue();
        final boolean $ceylontmp$increasing$8 = .ceylon.language.Integer.offset($ceylontmp$end$7, $ceylontmp$start$6) >= 0;
        final long $ceylontmp$incr$9 = $ceylontmp$increasing$8 ? 1L : -1L;
        loop_1: for (long i$10 = $ceylontmp$start$6; $ceylontmp$increasing$8 ? i$10 - $ceylontmp$end$7 <= 0L : i$10 - $ceylontmp$end$7 >= 0L; i$10 += $ceylontmp$incr$9) {
            final long i = i$10;
        }
        .java.lang.Object elem$11;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$12 = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.runtime_.get_().getMaxIntegerValue(), .ceylon.language.runtime_.get_().getMaxIntegerValue()).by(1L).iterator();
        loop_2: while (!((elem$11 = i$iterator$$12.next()) instanceof .ceylon.language.Finished)) {
            final long i = ((.ceylon.language.Integer)elem$11).longValue();
        }
        final long $ceylontmp$start$13 = .ceylon.language.runtime_.get_().getMaxIntegerValue().longValue();
        final long $ceylontmp$end$14 = .ceylon.language.runtime_.get_().getMaxIntegerValue().longValue();
        final long $ceylontmp$by$15 = 1L;
        if ($ceylontmp$by$15 <= 0) throw new .ceylon.language.AssertionError("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
        final boolean $ceylontmp$increasing$16 = .ceylon.language.Integer.offsetSign($ceylontmp$end$14, $ceylontmp$start$13) >= 0;
        final long $ceylontmp$incr$17 = $ceylontmp$increasing$16 ? $ceylontmp$by$15 : -$ceylontmp$by$15;
        loop_3: for (long i$18 = $ceylontmp$start$13; .ceylon.language.Integer.offsetSign(i$18, $ceylontmp$end$14) <= 0L && .ceylon.language.Integer.offsetSign(i$18, $ceylontmp$start$13) >= 0L; i$18 = .ceylon.language.Integer.neighbour(i$18, $ceylontmp$incr$17)) {
            final long i = i$18;
            .ceylon.language.print_.print(.ceylon.language.Integer.instance(i));
        }
        final long $ceylontmp$start$19 = .ceylon.language.runtime_.get_().getMinIntegerValue().longValue();
        final long $ceylontmp$end$20 = .ceylon.language.runtime_.get_().getMinIntegerValue().longValue();
        final boolean $ceylontmp$increasing$21 = .ceylon.language.Integer.offset($ceylontmp$end$20, $ceylontmp$start$19) >= 0;
        final long $ceylontmp$incr$22 = $ceylontmp$increasing$21 ? 1L : -1L;
        loop_4: for (long i$23 = $ceylontmp$start$19; $ceylontmp$increasing$21 ? i$23 - $ceylontmp$end$20 <= 0L : i$23 - $ceylontmp$end$20 >= 0L; i$23 += $ceylontmp$incr$22) {
            final long i = i$23;
        }
        final long $ceylontmp$start$24 = .ceylon.language.runtime_.get_().getMinIntegerValue().longValue();
        final long $ceylontmp$end$25 = .ceylon.language.runtime_.get_().getMinIntegerValue().longValue();
        final long $ceylontmp$by$26 = 1L;
        if ($ceylontmp$by$26 <= 0) throw new .ceylon.language.AssertionError("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
        final boolean $ceylontmp$increasing$27 = .ceylon.language.Integer.offsetSign($ceylontmp$end$25, $ceylontmp$start$24) >= 0;
        final long $ceylontmp$incr$28 = $ceylontmp$increasing$27 ? $ceylontmp$by$26 : -$ceylontmp$by$26;
        loop_5: for (long i$29 = $ceylontmp$start$24; .ceylon.language.Integer.offsetSign(i$29, $ceylontmp$end$25) <= 0L && .ceylon.language.Integer.offsetSign(i$29, $ceylontmp$start$24) >= 0L; i$29 = .ceylon.language.Integer.neighbour(i$29, $ceylontmp$incr$28)) {
            final long i = i$29;
            .ceylon.language.print_.print(.ceylon.language.Integer.instance(i));
        }
        long x = 0L;
        long first = -2L;
        long last = 2L;
        .ceylon.language.Sequential<? extends .ceylon.language.Integer> expect = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(-2L),
                .ceylon.language.Integer.instance(-1L),
                .ceylon.language.Integer.instance(0L),
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L)});
        .java.lang.Object elem$30;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$31 = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(first), .ceylon.language.Integer.instance(last)).iterator();
        loop_6: while (!((elem$30 = i$iterator$$31.next()) instanceof .ceylon.language.Finished)) {
            final long i = ((.ceylon.language.Integer)elem$30).longValue();
            .java.lang.String $ceylontmp$assert$32 = null;
            final long expected$34;
            .ceylon.language.Integer expected$33 = null;
            if ((expected$33 = expect.getFromFirst(x++)) != null) {
                expected$34 = expected$33.longValue();
                if (expected$34 == i) {
                } else {
                    $ceylontmp$assert$32 = .java.lang.System.lineSeparator() + "\tunviolated " + "exists expected = expect[x++]" + (.java.lang.System.lineSeparator() + "\tviolated ") + "expected == i";
                }
            } else {
                expected$34 = 0L;
                $ceylontmp$assert$32 = .java.lang.System.lineSeparator() + "\tviolated " + "exists expected = expect[x++]" + (.java.lang.System.lineSeparator() + "\tuntested ") + "expected == i";
            }
            if ($ceylontmp$assert$32 != null) throw new .ceylon.language.AssertionError("Assertion failed" + $ceylontmp$assert$32);
        }
        x = 0L;
        final long $ceylontmp$start$35 = first;
        final long $ceylontmp$end$36 = last;
        final boolean $ceylontmp$increasing$37 = .ceylon.language.Integer.offset($ceylontmp$end$36, $ceylontmp$start$35) >= 0;
        final long $ceylontmp$incr$38 = $ceylontmp$increasing$37 ? 1L : -1L;
        loop_7: for (long i$39 = $ceylontmp$start$35; $ceylontmp$increasing$37 ? i$39 - $ceylontmp$end$36 <= 0L : i$39 - $ceylontmp$end$36 >= 0L; i$39 += $ceylontmp$incr$38) {
            final long i = i$39;
            .java.lang.String $ceylontmp$assert$40 = null;
            final long expected$42;
            .ceylon.language.Integer expected$41 = null;
            if ((expected$41 = expect.getFromFirst(x++)) != null) {
                expected$42 = expected$41.longValue();
                if (expected$42 == i) {
                } else {
                    $ceylontmp$assert$40 = .java.lang.System.lineSeparator() + "\tunviolated " + "exists expected = expect[x++]" + (.java.lang.System.lineSeparator() + "\tviolated ") + "expected == i";
                }
            } else {
                expected$42 = 0L;
                $ceylontmp$assert$40 = .java.lang.System.lineSeparator() + "\tviolated " + "exists expected = expect[x++]" + (.java.lang.System.lineSeparator() + "\tuntested ") + "expected == i";
            }
            if ($ceylontmp$assert$40 != null) throw new .ceylon.language.AssertionError("Assertion failed" + $ceylontmp$assert$40);
        }
        x = 0L;
        first = 2L;
        last = -2L;
        expect = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(0L),
                .ceylon.language.Integer.instance(-1L),
                .ceylon.language.Integer.instance(-2L)});
        .java.lang.Object elem$43;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$44 = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(first), .ceylon.language.Integer.instance(last)).iterator();
        loop_8: while (!((elem$43 = i$iterator$$44.next()) instanceof .ceylon.language.Finished)) {
            final long i = ((.ceylon.language.Integer)elem$43).longValue();
            .java.lang.String $ceylontmp$assert$45 = null;
            final long expected$47;
            .ceylon.language.Integer expected$46 = null;
            if ((expected$46 = expect.getFromFirst(x++)) != null) {
                expected$47 = expected$46.longValue();
                if (expected$47 == i) {
                } else {
                    $ceylontmp$assert$45 = .java.lang.System.lineSeparator() + "\tunviolated " + "exists expected = expect[x++]" + (.java.lang.System.lineSeparator() + "\tviolated ") + "expected == i";
                }
            } else {
                expected$47 = 0L;
                $ceylontmp$assert$45 = .java.lang.System.lineSeparator() + "\tviolated " + "exists expected = expect[x++]" + (.java.lang.System.lineSeparator() + "\tuntested ") + "expected == i";
            }
            if ($ceylontmp$assert$45 != null) throw new .ceylon.language.AssertionError("Assertion failed" + $ceylontmp$assert$45);
        }
        x = 0L;
        final long $ceylontmp$start$48 = first;
        final long $ceylontmp$end$49 = last;
        final boolean $ceylontmp$increasing$50 = .ceylon.language.Integer.offset($ceylontmp$end$49, $ceylontmp$start$48) >= 0;
        final long $ceylontmp$incr$51 = $ceylontmp$increasing$50 ? 1L : -1L;
        loop_9: for (long i$52 = $ceylontmp$start$48; $ceylontmp$increasing$50 ? i$52 - $ceylontmp$end$49 <= 0L : i$52 - $ceylontmp$end$49 >= 0L; i$52 += $ceylontmp$incr$51) {
            final long i = i$52;
            .java.lang.String $ceylontmp$assert$53 = null;
            final long expected$55;
            .ceylon.language.Integer expected$54 = null;
            if ((expected$54 = expect.getFromFirst(x++)) != null) {
                expected$55 = expected$54.longValue();
                if (expected$55 == i) {
                } else {
                    $ceylontmp$assert$53 = .java.lang.System.lineSeparator() + "\tunviolated " + "exists expected = expect[x++]" + (.java.lang.System.lineSeparator() + "\tviolated ") + "expected == i";
                }
            } else {
                expected$55 = 0L;
                $ceylontmp$assert$53 = .java.lang.System.lineSeparator() + "\tviolated " + "exists expected = expect[x++]" + (.java.lang.System.lineSeparator() + "\tuntested ") + "expected == i";
            }
            if ($ceylontmp$assert$53 != null) throw new .ceylon.language.AssertionError("Assertion failed" + $ceylontmp$assert$53);
        }
        x = 0L;
        first = -2L;
        last = .ceylon.language.runtime_.get_().getMaxIntegerValue().longValue();
        try {
            .java.lang.Object elem$56;
            .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$57 = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(first), .ceylon.language.Integer.instance(last)).iterator();
            loop_10: while (!((elem$56 = i$iterator$$57.next()) instanceof .ceylon.language.Finished)) {
                final long i = ((.ceylon.language.Integer)elem$56).longValue();
                throw new .ceylon.language.AssertionError("Assertion failed" + ": unexpectedly entered unoptimized loop" + (.java.lang.System.lineSeparator() + "\tviolated " + "false"));
            }
        } catch (final .java.lang.Exception e) {
            try {
                x = 0L;
                final long $ceylontmp$start$59 = first;
                final long $ceylontmp$end$60 = last;
                final boolean $ceylontmp$increasing$61 = .ceylon.language.Integer.offset($ceylontmp$end$60, $ceylontmp$start$59) >= 0;
                final long $ceylontmp$incr$62 = $ceylontmp$increasing$61 ? 1L : -1L;
                loop_11: for (long i$63 = $ceylontmp$start$59; $ceylontmp$increasing$61 ? i$63 - $ceylontmp$end$60 <= 0L : i$63 - $ceylontmp$end$60 >= 0L; i$63 += $ceylontmp$incr$62) {
                    final long i = i$63;
                    throw new .ceylon.language.AssertionError("Assertion failed" + ": unexpectedly entered optimized loop" + (.java.lang.System.lineSeparator() + "\tviolated " + "false"));
                }
                throw new .java.lang.Error("Ceylon flow error");
            } catch (final .java.lang.Throwable e2) {
                if (!.com.redhat.ceylon.compiler.java.Util.throwableMessage(e).equals(.com.redhat.ceylon.compiler.java.Util.throwableMessage(e2))) {
                    throw new .ceylon.language.Exception(.ceylon.language.String.instance(new .java.lang.StringBuilder().append(.com.redhat.ceylon.compiler.java.Util.throwableMessage(e)).append(" != ").append(.com.redhat.ceylon.compiler.java.Util.throwableMessage(e2)).toString()));
                }
            }
        }
        first = .ceylon.language.runtime_.get_().getMaxIntegerValue().longValue();
        last = -2L;
        try {
            .java.lang.Object elem$66;
            .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$67 = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(first), .ceylon.language.Integer.instance(last)).iterator();
            loop_12: while (!((elem$66 = i$iterator$$67.next()) instanceof .ceylon.language.Finished)) {
                final long i = ((.ceylon.language.Integer)elem$66).longValue();
                throw new .ceylon.language.AssertionError("Assertion failed" + ": unexpectedly entered unoptimized loop" + (.java.lang.System.lineSeparator() + "\tviolated " + "false"));
            }
        } catch (final .java.lang.Exception e) {
            try {
                x = 0L;
                final long $ceylontmp$start$69 = first;
                final long $ceylontmp$end$70 = last;
                final boolean $ceylontmp$increasing$71 = .ceylon.language.Integer.offset($ceylontmp$end$70, $ceylontmp$start$69) >= 0;
                final long $ceylontmp$incr$72 = $ceylontmp$increasing$71 ? 1L : -1L;
                loop_13: for (long i$73 = $ceylontmp$start$69; $ceylontmp$increasing$71 ? i$73 - $ceylontmp$end$70 <= 0L : i$73 - $ceylontmp$end$70 >= 0L; i$73 += $ceylontmp$incr$72) {
                    final long i = i$73;
                    throw new .ceylon.language.AssertionError("Assertion failed" + ": unexpectedly entered optimized loop" + (.java.lang.System.lineSeparator() + "\tviolated " + "false"));
                }
                throw new .java.lang.Error("Ceylon flow error");
            } catch (final .java.lang.Throwable e2) {
                if (!.com.redhat.ceylon.compiler.java.Util.throwableMessage(e).equals(.com.redhat.ceylon.compiler.java.Util.throwableMessage(e2))) {
                    throw new .ceylon.language.Exception(.ceylon.language.String.instance(new .java.lang.StringBuilder().append(.com.redhat.ceylon.compiler.java.Util.throwableMessage(e)).append(" != ").append(.com.redhat.ceylon.compiler.java.Util.throwableMessage(e2)).toString()));
                }
            }
        }
        x = 0L;
        first = -2L;
        last = 2L;
        long step = 0L;
        try {
            .java.lang.Object elem$76;
            .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$77 = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(first), .ceylon.language.Integer.instance(last)).by(step).iterator();
            loop_14: while (!((elem$76 = i$iterator$$77.next()) instanceof .ceylon.language.Finished)) {
                final long i = ((.ceylon.language.Integer)elem$76).longValue();
                throw new .ceylon.language.AssertionError("Assertion failed" + ": unexpectedly entered unoptimized loop" + (.java.lang.System.lineSeparator() + "\tviolated " + "false"));
            }
        } catch (final .java.lang.Throwable e) {
            try {
                x = 0L;
                final long $ceylontmp$start$79 = first;
                final long $ceylontmp$end$80 = last;
                final long $ceylontmp$by$81 = step;
                if ($ceylontmp$by$81 <= 0) throw new .ceylon.language.AssertionError("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
                final boolean $ceylontmp$increasing$82 = .ceylon.language.Integer.offsetSign($ceylontmp$end$80, $ceylontmp$start$79) >= 0;
                final long $ceylontmp$incr$83 = $ceylontmp$increasing$82 ? $ceylontmp$by$81 : -$ceylontmp$by$81;
                loop_15: for (long i$84 = $ceylontmp$start$79; .ceylon.language.Integer.offsetSign(i$84, $ceylontmp$end$80) <= 0L && .ceylon.language.Integer.offsetSign(i$84, $ceylontmp$start$79) >= 0L; i$84 = .ceylon.language.Integer.neighbour(i$84, $ceylontmp$incr$83)) {
                    final long i = i$84;
                    throw new .ceylon.language.AssertionError("Assertion failed" + ": unexpectedly entered optimized loop" + (.java.lang.System.lineSeparator() + "\tviolated " + "false"));
                }
                throw new .java.lang.Error("Ceylon flow error");
            } catch (final .java.lang.Throwable e2) {
                if (!.com.redhat.ceylon.compiler.java.Util.throwableMessage(e).equals(.com.redhat.ceylon.compiler.java.Util.throwableMessage(e2))) {
                    throw new .ceylon.language.Exception(.ceylon.language.String.instance(new .java.lang.StringBuilder().append(.com.redhat.ceylon.compiler.java.Util.throwableMessage(e)).append(" != ").append(.com.redhat.ceylon.compiler.java.Util.throwableMessage(e2)).toString()));
                }
            }
        }
        x = 0L;
        first = 2L;
        last = -2L;
        step = 0L;
        try {
            .java.lang.Object elem$87;
            .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$88 = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(first), .ceylon.language.Integer.instance(last)).by(step).iterator();
            loop_16: while (!((elem$87 = i$iterator$$88.next()) instanceof .ceylon.language.Finished)) {
                final long i = ((.ceylon.language.Integer)elem$87).longValue();
                throw new .ceylon.language.AssertionError("Assertion failed" + ": unexpectedly entered unoptimized loop" + (.java.lang.System.lineSeparator() + "\tviolated " + "false"));
            }
        } catch (final .java.lang.Throwable e) {
            try {
                x = 0L;
                final long $ceylontmp$start$90 = first;
                final long $ceylontmp$end$91 = last;
                final long $ceylontmp$by$92 = step;
                if ($ceylontmp$by$92 <= 0) throw new .ceylon.language.AssertionError("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
                final boolean $ceylontmp$increasing$93 = .ceylon.language.Integer.offsetSign($ceylontmp$end$91, $ceylontmp$start$90) >= 0;
                final long $ceylontmp$incr$94 = $ceylontmp$increasing$93 ? $ceylontmp$by$92 : -$ceylontmp$by$92;
                loop_17: for (long i$95 = $ceylontmp$start$90; .ceylon.language.Integer.offsetSign(i$95, $ceylontmp$end$91) <= 0L && .ceylon.language.Integer.offsetSign(i$95, $ceylontmp$start$90) >= 0L; i$95 = .ceylon.language.Integer.neighbour(i$95, $ceylontmp$incr$94)) {
                    final long i = i$95;
                    throw new .ceylon.language.AssertionError("Assertion failed" + ": unexpectedly entered optimized loop" + (.java.lang.System.lineSeparator() + "\tviolated " + "false"));
                }
                throw new .java.lang.Error("Ceylon flow error");
            } catch (final .java.lang.Throwable e2) {
                if (!.com.redhat.ceylon.compiler.java.Util.throwableMessage(e).equals(.com.redhat.ceylon.compiler.java.Util.throwableMessage(e2))) {
                    throw new .ceylon.language.Exception(.ceylon.language.String.instance(new .java.lang.StringBuilder().append(.com.redhat.ceylon.compiler.java.Util.throwableMessage(e)).append(" != ").append(.com.redhat.ceylon.compiler.java.Util.throwableMessage(e2)).toString()));
                }
            }
        }
        first = 1L;
        last = 10L;
        step = .ceylon.language.runtime_.get_().getMaxIntegerValue().longValue();
        try {
            .java.lang.Object elem$98;
            .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$99 = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(first), .ceylon.language.Integer.instance(last)).by(step).iterator();
            loop_18: while (!((elem$98 = i$iterator$$99.next()) instanceof .ceylon.language.Finished)) {
                final long i = ((.ceylon.language.Integer)elem$98).longValue();
                throw new .ceylon.language.AssertionError("Assertion failed" + ": unexpectedly entered unoptimized loop" + (.java.lang.System.lineSeparator() + "\tviolated " + "false"));
            }
        } catch (final .java.lang.Throwable e) {
            try {
                x = 0L;
                final long $ceylontmp$start$101 = first;
                final long $ceylontmp$end$102 = last;
                final long $ceylontmp$by$103 = step;
                if ($ceylontmp$by$103 <= 0) throw new .ceylon.language.AssertionError("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
                final boolean $ceylontmp$increasing$104 = .ceylon.language.Integer.offsetSign($ceylontmp$end$102, $ceylontmp$start$101) >= 0;
                final long $ceylontmp$incr$105 = $ceylontmp$increasing$104 ? $ceylontmp$by$103 : -$ceylontmp$by$103;
                loop_19: for (long i$106 = $ceylontmp$start$101; .ceylon.language.Integer.offsetSign(i$106, $ceylontmp$end$102) <= 0L && .ceylon.language.Integer.offsetSign(i$106, $ceylontmp$start$101) >= 0L; i$106 = .ceylon.language.Integer.neighbour(i$106, $ceylontmp$incr$105)) {
                    final long i = i$106;
                    throw new .ceylon.language.AssertionError("Assertion failed" + ": unexpectedly entered optimized loop" + (.java.lang.System.lineSeparator() + "\tviolated " + "false"));
                }
                throw new .java.lang.Error("Ceylon flow error");
            } catch (final .java.lang.Throwable e2) {
                if (!.com.redhat.ceylon.compiler.java.Util.throwableMessage(e).equals(.com.redhat.ceylon.compiler.java.Util.throwableMessage(e2))) {
                    throw new .ceylon.language.Exception(.ceylon.language.String.instance(new .java.lang.StringBuilder().append(.com.redhat.ceylon.compiler.java.Util.throwableMessage(e)).append(" != ").append(.com.redhat.ceylon.compiler.java.Util.throwableMessage(e2)).toString()));
                }
            }
        }
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.com.redhat.ceylon.compiler.java.metadata.Method
final class bug2130Measure_ {
    
    private bug2130Measure_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    static void bug2130Measure() {
    }
}