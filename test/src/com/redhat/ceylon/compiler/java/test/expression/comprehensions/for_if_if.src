package com.redhat.ceylon.compiler.java.test.expression.comprehensions;

final class forIfIf_ {
    
    private forIfIf_() {
    }
    private static final .ceylon.language.Sequential<? extends .ceylon.language.Integer>[] value;
    static {
        value = new .ceylon.language.Sequential[]{new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Null.$TypeDescriptor){
            
            public final .ceylon.language.Iterator<.ceylon.language.Integer> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor){
                    {
                        iter$0 = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(10L)).iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> iter$0;
                    private .ceylon.language.Integer x;
                    private boolean x$exhausted;
                    
                    private final boolean x() {
                        final .java.lang.Object $ceylontmpitem0 = iter$0.next();
                        x$exhausted = $ceylontmpitem0 == .ceylon.language.finished_.$get();
                        if (x$exhausted) {
                            return false;
                        } else {
                            x = (.ceylon.language.Integer)$ceylontmpitem0;
                            return true;
                        }
                    }
                    
                    private final boolean next1() {
                        while (true) {
                            if (!this.x()) break;
                            if (x.remainder(.ceylon.language.Integer.instance(2L)).equals(.ceylon.language.Integer.instance(0L))) {
                                break;
                            }
                        }
                        return !x$exhausted;
                    }
                    
                    private final boolean next2() {
                        while (true) {
                            if (!this.next1()) break;
                            if (x.compare(.ceylon.language.Integer.instance(5L)).largerThan()) {
                                break;
                            }
                        }
                        return !x$exhausted;
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.next2()) {
                            final .ceylon.language.Integer x = this.x;
                            return x;
                        } else return .ceylon.language.finished_.$get();
                    }
                };
            }
        }.getSequence()};
    }
    
    public static .ceylon.language.Sequential<? extends .ceylon.language.Integer> $get() {
        try {
            return value[0];
        } catch (.java.lang.NullPointerException ex) {
            throw new .ceylon.language.InitializationException("Cyclic initialization");
        }
    }
}