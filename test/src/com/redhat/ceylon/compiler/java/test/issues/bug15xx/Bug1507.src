package com.redhat.ceylon.compiler.java.test.issues.bug15xx;

final class bug1507_ {
    
    private bug1507_() {
    }
    
    static void bug1507() {
        try {
            final .com.redhat.ceylon.compiler.java.test.issues.bug15xx.Bug1507IntWrapper i;
            .com.redhat.ceylon.compiler.java.test.issues.bug15xx.Bug1507IntWrapper i$0 = null;
            if (new .java.util.Random().nextBoolean()) {
                i = new .com.redhat.ceylon.compiler.java.test.issues.bug15xx.Bug1507IntWrapper(2L);
            } else {
                boolean doforelse$2 = true;
                final long $ceylontmp$first$3 = 0L;
                final long $ceylontmp$last$4 = new .java.util.Random().nextInt(.com.redhat.ceylon.compiler.java.Util.toInt(10L));
                final boolean $ceylontmp$increasing$5 = .ceylon.language.Integer.offset($ceylontmp$last$4, $ceylontmp$first$3) >= 0;
                final long $ceylontmp$incr$6 = $ceylontmp$increasing$5 ? 1L : -1L;
                loop_0: for (long j$7 = $ceylontmp$first$3; $ceylontmp$increasing$5 ? j$7 - $ceylontmp$last$4 <= 0L : j$7 - $ceylontmp$last$4 >= 0L; j$7 += $ceylontmp$incr$6) {
                    final long j = j$7;
                    .java.lang.Object k$9;
                    if ((k$9 = .com.redhat.ceylon.compiler.java.test.issues.bug15xx.bug1507generateInt_.bug1507generateInt(j == 0L)) != null) {
                        final .com.redhat.ceylon.compiler.java.test.issues.bug15xx.Bug1507IntWrapper k$10 = (.com.redhat.ceylon.compiler.java.test.issues.bug15xx.Bug1507IntWrapper)k$9;
                        i$0 = k$10;
                        final .com.redhat.ceylon.compiler.java.test.issues.bug15xx.Bug1507IntWrapper i$11 = i$0;
                        .ceylon.language.process_.get_().write(new .java.lang.StringBuilder().append("J is ").append(j).toString());
                        doforelse$2 = false;
                        break loop_0;
                    } else {
                        .ceylon.language.process_.get_().write("Nope");
                    }
                }
                if (doforelse$2) {
                    throw new .ceylon.language.Exception(null, null);
                }
                i = i$0;
            }
            .ceylon.language.process_.get_().write(.ceylon.language.Integer.toString(.ceylon.language.Integer.minus(i.getWrappedInt(), 1L)));
        } catch (final .java.lang.Exception e) {
            .ceylon.language.process_.get_().write(e.toString());
        }
    }
}
class Bug1507IntWrapper implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    Bug1507IntWrapper(final long wrappedInt) {
        this.wrappedInt = wrappedInt;
    }
    private final long wrappedInt;
    
    public final long getWrappedInt() {
        return wrappedInt;
    }
    
    @.java.lang.Override
    public final .java.lang.String toString() {
        return .ceylon.language.Integer.toString(getWrappedInt());
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.issues.bug15xx.Bug1507IntWrapper.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.issues.bug15xx.Bug1507IntWrapper.class);
}
final class bug1507generateInt_ {
    
    private bug1507generateInt_() {
    }
    
    static .com.redhat.ceylon.compiler.java.test.issues.bug15xx.Bug1507IntWrapper bug1507generateInt(final boolean b) {
        if (b) {
            return new .com.redhat.ceylon.compiler.java.test.issues.bug15xx.Bug1507IntWrapper(5L);
        }
        return null;
    }
}
final class bug1507test_ {
    
    private bug1507test_() {
    }
    
    static void bug1507test() {
        final boolean found;
        boolean found$13 = false;
        final .ceylon.language.Array<.ceylon.language.Integer> array = .ceylon.language.arrayOfSize_.<.ceylon.language.Integer>arrayOfSize(.ceylon.language.Integer.$TypeDescriptor$, 2L, .ceylon.language.Integer.instance(0L));
        boolean doforelse$14 = true;
        .java.lang.Object elem$15;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$16 = array.iterator();
        loop_1: while (!((elem$15 = i$iterator$$16.next()) instanceof .ceylon.language.Finished)) {
            final long i = ((.ceylon.language.Integer)elem$15).longValue();
            if (i == 0L) {
                found$13 = true;
                final boolean found$18 = found$13;
                doforelse$14 = false;
                break loop_1;
            } else {
                .ceylon.language.process_.get_().write("");
            }
        }
        if (doforelse$14) {
            found$13 = false;
            final boolean found$19 = found$13;
        }
        found = found$13;
        .ceylon.language.process_.get_().write(new .java.lang.StringBuilder().append(found).toString());
    }
}
final class bug1507test2_ {
    
    private bug1507test2_() {
    }
    
    static void bug1507test2() {
        final boolean found;
        boolean found$20 = false;
        final .ceylon.language.Array<.ceylon.language.Integer> array = .ceylon.language.arrayOfSize_.<.ceylon.language.Integer>arrayOfSize(.ceylon.language.Integer.$TypeDescriptor$, 2L, .ceylon.language.Integer.instance(0L));
        boolean doforelse$21 = true;
        final .java.lang.Object array$22 = array.toArray();
        final int length$23 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$22);
        loop_2: for (int i$24 = 0; i$24 < length$23; i$24++) {
            final long i = .com.redhat.ceylon.compiler.java.Util.getIntegerArray(array$22, i$24);
            if (i == 0L) {
                found$20 = true;
                final boolean found$26 = found$20;
                doforelse$21 = false;
                break loop_2;
            } else {
                .ceylon.language.process_.get_().write("");
            }
        }
        if (doforelse$21) {
            found$20 = false;
            final boolean found$27 = found$20;
        }
        found = found$20;
        .ceylon.language.process_.get_().write(new .java.lang.StringBuilder().append(found).toString());
    }
}
final class bug1507test3_ {
    
    private bug1507test3_() {
    }
    
    static void bug1507test3() {
        final boolean found;
        boolean found$28 = false;
        boolean doforelse$29 = true;
        final long start$30 = 1L;
        final long length$31 = 2L;
        loop_3: for (long i$32 = 0; i$32 < length$31; i$32++) {
            final long i = i$32 + start$30;
            if (i == 0L) {
                found$28 = true;
                final boolean found$34 = found$28;
                doforelse$29 = false;
                break loop_3;
            } else {
                .ceylon.language.process_.get_().write("");
            }
        }
        if (doforelse$29) {
            found$28 = false;
            final boolean found$35 = found$28;
        }
        found = found$28;
        .ceylon.language.process_.get_().write(new .java.lang.StringBuilder().append(found).toString());
    }
}
final class bug1507test4_ {
    
    private bug1507test4_() {
    }
    
    static void bug1507test4() {
        final boolean found;
        boolean found$36 = false;
        final .java.lang.Object span = .ceylon.language.measure_.<.ceylon.language.Integer>measure(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), 2L);
        boolean doforelse$37 = true;
        .java.lang.Object elem$38;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$39 = ((.ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object>)(.ceylon.language.Iterable)span).iterator();
        loop_4: while (!((elem$38 = i$iterator$$39.next()) instanceof .ceylon.language.Finished)) {
            final long i = ((.ceylon.language.Integer)elem$38).longValue();
            if (i == 0L) {
                found$36 = true;
                final boolean found$41 = found$36;
                doforelse$37 = false;
                break loop_4;
            } else {
                .ceylon.language.process_.get_().write("");
            }
        }
        if (doforelse$37) {
            found$36 = false;
            final boolean found$42 = found$36;
        }
        found = found$36;
        .ceylon.language.process_.get_().write(new .java.lang.StringBuilder().append(found).toString());
    }
}
final class bug1507test5_ {
    
    private bug1507test5_() {
    }
    
    static void bug1507test5() {
        final boolean found;
        boolean found$43 = false;
        final .ceylon.language.Range<.ceylon.language.Integer> range = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L));
        boolean doforelse$44 = true;
        .java.lang.Object elem$45;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$46 = range.iterator();
        loop_5: while (!((elem$45 = i$iterator$$46.next()) instanceof .ceylon.language.Finished)) {
            final long i = ((.ceylon.language.Integer)elem$45).longValue();
            if (i == 0L) {
                found$43 = true;
                final boolean found$48 = found$43;
                doforelse$44 = false;
                break loop_5;
            } else {
                .ceylon.language.process_.get_().write("");
            }
        }
        if (doforelse$44) {
            found$43 = false;
            final boolean found$49 = found$43;
        }
        found = found$43;
        .ceylon.language.process_.get_().write(new .java.lang.StringBuilder().append(found).toString());
    }
}
final class bug1507test6_ {
    
    private bug1507test6_() {
    }
    
    static void bug1507test6() {
        final boolean found;
        boolean found$50 = false;
        boolean doforelse$51 = true;
        final long $ceylontmp$first$52 = 1L;
        final long $ceylontmp$last$53 = 2L;
        final boolean $ceylontmp$increasing$54 = .ceylon.language.Integer.offset($ceylontmp$last$53, $ceylontmp$first$52) >= 0;
        final long $ceylontmp$incr$55 = $ceylontmp$increasing$54 ? 1L : -1L;
        loop_6: for (long i$56 = $ceylontmp$first$52; $ceylontmp$increasing$54 ? i$56 - $ceylontmp$last$53 <= 0L : i$56 - $ceylontmp$last$53 >= 0L; i$56 += $ceylontmp$incr$55) {
            final long i = i$56;
            if (i == 0L) {
                found$50 = true;
                final boolean found$58 = found$50;
                doforelse$51 = false;
                break loop_6;
            } else {
                .ceylon.language.process_.get_().write("");
            }
        }
        if (doforelse$51) {
            found$50 = false;
            final boolean found$59 = found$50;
        }
        found = found$50;
        .ceylon.language.process_.get_().write(new .java.lang.StringBuilder().append(found).toString());
    }
}